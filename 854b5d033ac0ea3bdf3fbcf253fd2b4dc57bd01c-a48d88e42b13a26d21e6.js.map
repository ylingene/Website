{"version":3,"file":"854b5d033ac0ea3bdf3fbcf253fd2b4dc57bd01c-a48d88e42b13a26d21e6.js","mappings":"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","sources":["webpack://lingene/./node_modules/use-resize-observer/dist/bundle.esm.js","webpack://lingene/./node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","webpack://lingene/./src/components/gallery/lightbox.js","webpack://lingene/./src/components/gallery/gallery.js","webpack://lingene/./src/components/gallery/style.scss","webpack://lingene/./node_modules/justified-layout/lib/index.js","webpack://lingene/./node_modules/justified-layout/lib/row.js"],"sourcesContent":["import { useRef, useEffect, useCallback, useState, useMemo } from 'react';\n\n// This could've been more streamlined with internal state instead of abusing\n// refs to such extent, but then composing hooks and components could not opt out of unnecessary renders.\nfunction useResolvedElement(subscriber, refOrElement) {\n  var lastReportRef = useRef(null);\n  var refOrElementRef = useRef(null);\n  refOrElementRef.current = refOrElement;\n  var cbElementRef = useRef(null); // Calling re-evaluation after each render without using a dep array,\n  // as the ref object's current value could've changed since the last render.\n\n  useEffect(function () {\n    evaluateSubscription();\n  });\n  var evaluateSubscription = useCallback(function () {\n    var cbElement = cbElementRef.current;\n    var refOrElement = refOrElementRef.current; // Ugly ternary. But smaller than an if-else block.\n\n    var element = cbElement ? cbElement : refOrElement ? refOrElement instanceof Element ? refOrElement : refOrElement.current : null;\n\n    if (lastReportRef.current && lastReportRef.current.element === element && lastReportRef.current.subscriber === subscriber) {\n      return;\n    }\n\n    if (lastReportRef.current && lastReportRef.current.cleanup) {\n      lastReportRef.current.cleanup();\n    }\n\n    lastReportRef.current = {\n      element: element,\n      subscriber: subscriber,\n      // Only calling the subscriber, if there's an actual element to report.\n      // Setting cleanup to undefined unless a subscriber returns one, as an existing cleanup function would've been just called.\n      cleanup: element ? subscriber(element) : undefined\n    };\n  }, [subscriber]); // making sure we call the cleanup function on unmount\n\n  useEffect(function () {\n    return function () {\n      if (lastReportRef.current && lastReportRef.current.cleanup) {\n        lastReportRef.current.cleanup();\n        lastReportRef.current = null;\n      }\n    };\n  }, []);\n  return useCallback(function (element) {\n    cbElementRef.current = element;\n    evaluateSubscription();\n  }, [evaluateSubscription]);\n}\n\n// We're only using the first element of the size sequences, until future versions of the spec solidify on how\n// exactly it'll be used for fragments in multi-column scenarios:\n// From the spec:\n// > The box size properties are exposed as FrozenArray in order to support elements that have multiple fragments,\n// > which occur in multi-column scenarios. However the current definitions of content rect and border box do not\n// > mention how those boxes are affected by multi-column layout. In this spec, there will only be a single\n// > ResizeObserverSize returned in the FrozenArray, which will correspond to the dimensions of the first column.\n// > A future version of this spec will extend the returned FrozenArray to contain the per-fragment size information.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-entry-interface)\n//\n// Also, testing these new box options revealed that in both Chrome and FF everything is returned in the callback,\n// regardless of the \"box\" option.\n// The spec states the following on this:\n// > This does not have any impact on which box dimensions are returned to the defined callback when the event\n// > is fired, it solely defines which box the author wishes to observe layout changes on.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// I'm not exactly clear on what this means, especially when you consider a later section stating the following:\n// > This section is non-normative. An author may desire to observe more than one CSS box.\n// > In this case, author will need to use multiple ResizeObservers.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.\n// For this reason I decided to only return the requested size,\n// even though it seems we have access to results for all box types.\n// This also means that we get to keep the current api, being able to return a simple { width, height } pair,\n// regardless of box option.\nfunction extractSize(entry, boxProp, sizeType) {\n  if (!entry[boxProp]) {\n    if (boxProp === \"contentBoxSize\") {\n      // The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.\n      // See the 6th step in the description for the RO algorithm:\n      // https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h\n      // > Set this.contentRect to logical this.contentBoxSize given target and observedBox of \"content-box\".\n      // In real browser implementations of course these objects differ, but the width/height values should be equivalent.\n      return entry.contentRect[sizeType === \"inlineSize\" ? \"width\" : \"height\"];\n    }\n\n    return undefined;\n  } // A couple bytes smaller than calling Array.isArray() and just as effective here.\n\n\n  return entry[boxProp][0] ? entry[boxProp][0][sizeType] : // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's current\n  // behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.\n  // @ts-ignore\n  entry[boxProp][sizeType];\n}\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver.\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize;\n  var round = opts.round || Math.round; // Using a single instance throughout the hook's lifetime\n\n  var resizeObserverRef = useRef();\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after\n  // the component unmounted.\n\n\n  var didUnmount = useRef(false);\n  useEffect(function () {\n    didUnmount.current = false;\n    return function () {\n      didUnmount.current = true;\n    };\n  }, []); // Using a ref to track the previous width / height to avoid unnecessary renders.\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  }); // This block is kinda like a useEffect, only it's called whenever a new\n  // element could be resolved based on the ref option. It also has a cleanup\n  // function.\n\n  var refCallback = useResolvedElement(useCallback(function (element) {\n    // We only use a single Resize Observer instance, and we're instantiating it on demand, only once there's something to observe.\n    // This instance is also recreated when the `box` option changes, so that a new observation is fired if there was a previously observed element with a different box option.\n    if (!resizeObserverRef.current || resizeObserverRef.current.box !== opts.box || resizeObserverRef.current.round !== round) {\n      resizeObserverRef.current = {\n        box: opts.box,\n        round: round,\n        instance: new ResizeObserver(function (entries) {\n          var entry = entries[0];\n          var boxProp = opts.box === \"border-box\" ? \"borderBoxSize\" : opts.box === \"device-pixel-content-box\" ? \"devicePixelContentBoxSize\" : \"contentBoxSize\";\n          var reportedWidth = extractSize(entry, boxProp, \"inlineSize\");\n          var reportedHeight = extractSize(entry, boxProp, \"blockSize\");\n          var newWidth = reportedWidth ? round(reportedWidth) : undefined;\n          var newHeight = reportedHeight ? round(reportedHeight) : undefined;\n\n          if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n            var newSize = {\n              width: newWidth,\n              height: newHeight\n            };\n            previous.current.width = newWidth;\n            previous.current.height = newHeight;\n\n            if (onResizeRef.current) {\n              onResizeRef.current(newSize);\n            } else {\n              if (!didUnmount.current) {\n                setSize(newSize);\n              }\n            }\n          }\n        })\n      };\n    }\n\n    resizeObserverRef.current.instance.observe(element, {\n      box: opts.box\n    });\n    return function () {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.instance.unobserve(element);\n      }\n    };\n  }, [opts.box, round]), opts.ref);\n  return useMemo(function () {\n    return {\n      ref: refCallback,\n      width: size.width,\n      height: size.height\n    };\n  }, [refCallback, size.width, size.height]);\n}\n\nexport { useResizeObserver as default };\n","/*!\n  * PhotoSwipe Lightbox 5.4.3 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n\n  if (className) {\n    el.className = className;\n  }\n\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n\n  return el;\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n\n  if (scale !== undefined) {\n    propValue += ` scale3d(${scale},${scale},1)`;\n  }\n\n  return propValue;\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? `${w}px` : w;\n  el.style.height = typeof h === 'number' ? `${h}px` : h;\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\n\nfunction isPswpClass(fn) {\n  return typeof fn === 'function' && fn.prototype && fn.prototype.goTo;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n\n  addFilter(name, fn, priority = 100) {\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n\n  applyFilters(name, ...args) {\n    var _this$_filters$name3;\n\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  off(name, fn) {\n    var _this$pswp3;\n\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event =\n    /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n\n}\n\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n\n    if (imageSrc) {\n      const imgEl =\n      /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    var _this$element;\n\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n\n    this.element = null;\n  }\n\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc', // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n\n    if (this.element && !reload) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    const imageElement =\n    /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n\n    setWidthHeight(this.element, width, height);\n\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n\n    const image =\n    /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.remove();\n\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl =\n      /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n\n    this.isAttached = true;\n\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    const supportsDecode = ('decode' in this.element);\n\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n\n  remove() {\n    this.isAttached = false;\n\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName =\n    /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n\n}\n\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n\n  content.lazyLoad();\n\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n\n  getItemData(index) {\n    var _this$options2;\n\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl =\n    /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n\n}\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/content.js').default} Content */\n\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\n\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    /** @type {PhotoSwipeOptions} */\n\n    this.options = options || {};\n    this._uid = 0;\n    this.shouldOpen = false;\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\n\n    this._preloadedContent = undefined;\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\n  }\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\n\n\n  init() {\n    // Bind click events to each gallery\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach(galleryElement => {\n      galleryElement.addEventListener('click', this.onThumbnailsClick, false);\n    });\n  }\n  /**\r\n   * @param {MouseEvent} e\r\n   */\n\n\n  onThumbnailsClick(e) {\n    // Exit and allow default browser action if:\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\n    || window.pswp) {\n      // ... if PhotoSwipe is already open\n      return;\n    } // If both clientX and clientY are 0 or not defined,\n    // the event is likely triggered by keyboard,\n    // so we do not pass the initialPoint\n    //\n    // Note that some screen readers emulate the mouse position,\n    // so it's not the ideal way to detect them.\n    //\n\n    /** @type {Point | null} */\n\n\n    let initialPoint = {\n      x: e.clientX,\n      y: e.clientY\n    };\n\n    if (!initialPoint.x && !initialPoint.y) {\n      initialPoint = null;\n    }\n\n    let clickedIndex = this.getClickedIndex(e);\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\n    /** @type {DataSource} */\n\n    const dataSource = {\n      gallery:\n      /** @type {HTMLElement} */\n      e.currentTarget\n    };\n\n    if (clickedIndex >= 0) {\n      e.preventDefault();\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\n    }\n  }\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\n\n\n  getClickedIndex(e) {\n    // legacy option\n    if (this.options.getClickedIndexFn) {\n      return this.options.getClickedIndexFn.call(this, e);\n    }\n\n    const clickedTarget =\n    /** @type {HTMLElement} */\n    e.target;\n    const childElements = getElementsFromOption(this.options.children, this.options.childSelector,\n    /** @type {HTMLElement} */\n    e.currentTarget);\n    const clickedChildIndex = childElements.findIndex(child => child === clickedTarget || child.contains(clickedTarget));\n\n    if (clickedChildIndex !== -1) {\n      return clickedChildIndex;\n    } else if (this.options.children || this.options.childSelector) {\n      // click wasn't on a child element\n      return -1;\n    } // There is only one item (which is the gallery)\n\n\n    return 0;\n  }\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\n\n\n  loadAndOpen(index, dataSource, initialPoint) {\n    // Check if the gallery is already open\n    if (window.pswp || !this.options) {\n      return false;\n    } // Use the first gallery element if dataSource is not provided\n\n\n    if (!dataSource && this.options.gallery && this.options.children) {\n      const galleryElements = getElementsFromOption(this.options.gallery);\n\n      if (galleryElements[0]) {\n        dataSource = {\n          gallery: galleryElements[0]\n        };\n      }\n    } // set initial index\n\n\n    this.options.index = index; // define options for PhotoSwipe constructor\n\n    this.options.initialPointerPos = initialPoint;\n    this.shouldOpen = true;\n    this.preload(index, dataSource);\n    return true;\n  }\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\n\n\n  preload(index, dataSource) {\n    const {\n      options\n    } = this;\n\n    if (dataSource) {\n      options.dataSource = dataSource;\n    } // Add the main module\n\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\n\n\n    const promiseArray = [];\n    const pswpModuleType = typeof options.pswpModule;\n\n    if (isPswpClass(options.pswpModule)) {\n      promiseArray.push(Promise.resolve(\n      /** @type {Type<PhotoSwipe>} */\n      options.pswpModule));\n    } else if (pswpModuleType === 'string') {\n      throw new Error('pswpModule as string is no longer supported');\n    } else if (pswpModuleType === 'function') {\n      promiseArray.push(\n      /** @type {() => Promise<Type<PhotoSwipe>>} */\n      options.pswpModule());\n    } else {\n      throw new Error('pswpModule is not valid');\n    } // Add custom-defined promise, if any\n\n\n    if (typeof options.openPromise === 'function') {\n      // allow developers to perform some task before opening\n      promiseArray.push(options.openPromise());\n    }\n\n    if (options.preloadFirstSlide !== false && index >= 0) {\n      this._preloadedContent = lazyLoadSlide(index, this);\n    } // Wait till all promises resolve and open PhotoSwipe\n\n\n    const uid = ++this._uid;\n    Promise.all(promiseArray).then(iterableModules => {\n      if (this.shouldOpen) {\n        const mainModule = iterableModules[0];\n\n        this._openPhotoswipe(mainModule, uid);\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\n\n\n  _openPhotoswipe(module, uid) {\n    // Cancel opening if UID doesn't match the current one\n    // (if user clicked on another gallery item before current was loaded).\n    //\n    // Or if shouldOpen flag is set to false\n    // (developer may modify it via public API)\n    if (uid !== this._uid && this.shouldOpen) {\n      return;\n    }\n\n    this.shouldOpen = false; // PhotoSwipe is already open\n\n    if (window.pswp) {\n      return;\n    }\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\n\n\n    const pswp = typeof module === 'object' ? new module.default(this.options) // eslint-disable-line\n    : new module(this.options); // eslint-disable-line\n\n    this.pswp = pswp;\n    window.pswp = pswp; // map listeners from Lightbox to PhotoSwipe Core\n\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\n\n    Object.keys(this._listeners).forEach(name => {\n      var _this$_listeners$name;\n\n      (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.forEach(fn => {\n        pswp.on(name,\n        /** @type {EventCallback<typeof name>} */\n        fn);\n      });\n    }); // same with filters\n\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\n\n    Object.keys(this._filters).forEach(name => {\n      var _this$_filters$name;\n\n      (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.forEach(filter => {\n        pswp.addFilter(name, filter.fn, filter.priority);\n      });\n    });\n\n    if (this._preloadedContent) {\n      pswp.contentLoader.addToCache(this._preloadedContent);\n      this._preloadedContent = undefined;\n    }\n\n    pswp.on('destroy', () => {\n      // clean up public variables\n      this.pswp = undefined;\n      delete window.pswp;\n    });\n    pswp.init();\n  }\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\n\n\n  destroy() {\n    var _this$pswp;\n\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.destroy();\n    this.shouldOpen = false;\n    this._listeners = {};\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach(galleryElement => {\n      galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\n    });\n  }\n\n}\n\nexport { PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","import { getImage } from \"gatsby-plugin-image\"\nimport PhotoSwipeLightbox from \"photoswipe/lightbox\"\n\nconst PHOTOSWIPE_OPTIONS = {\n    zoom: false,\n    counter: false,\n    bgOpacity: 0.95,\n    showHideAnimationType: \"fade\",\n    imageClickAction: \"next\",\n    tapAction: \"next\",\n    showAnimationDuration: 0,\n    hideAnimationDuration: 200,\n    paddingFn: (viewportSize, itemData, index) => {\n        // Have top & bottom lightbox padding on smaller screens.\n        // Called often, so must be performant\n        const padding = viewportSize.x < 800 ? 24 : 48\n        return {\n            top: padding,\n            bottom: padding,\n            left: 0,\n            right: 0,\n        }\n    },\n}\n\nexport const GALLERY_ID = \"pswp-gallery\"\n\n/**\n * Gets the necessary data for Photoswipe from the corresponding image\n *\n * @param {string} alt - alt text for the image\n * @param {object} image - Gatsby Image object\n * @returns object of props to be passed into the Photoswipe child link elements\n */\nexport const getLightboxData = (alt, image) => {\n    const gatsbyImage = getImage(image)\n    return {\n        href: gatsbyImage.images.fallback.src,\n        \"data-pswp-height\": gatsbyImage.height,\n        \"data-pswp-width\": gatsbyImage.width,\n        \"data-pswp-srcset\": gatsbyImage.images.fallback.srcSet,\n        // \"data-pswp-avif-src\": gatsbyImage.images.sources[0].srcSet,\n        // \"data-pswp-webp-src\": gatsbyImage.images.sources[1].srcSet,\n        \"data-pswp-alt\": alt,\n    }\n}\n\n/**\n * To be called in a React hook for initialization and clean up.\n *\n * @returns function for lightbox clean up when component unmounts\n */\nconst initializeLightbox = () => {\n    let lightbox = new PhotoSwipeLightbox({\n        gallery: \"#\" + GALLERY_ID, // id of the parent container\n        children: \"a\", // child pswp elements within parent container\n        ...PHOTOSWIPE_OPTIONS,\n        pswpModule: () => import(\"photoswipe\"),\n    })\n\n    /*\n    // commenting out since showAnimationDuration: 0, so no placeholder will be shown.\n    // there's a problem with stretching of placeholder and lightbox image when loading.\n    // issue: https://github.com/dimsemenov/PhotoSwipe/issues/1966\n\n    // update msrc, the source of the thumbnail placeholder, when opening the lightbox\n    lightbox.addFilter(\"domItemData\", (itemData, element, linkEl) => {\n        // Use the currently presented image url (srcset) for the thumbnail placeholder when\n        // transitioning and loading in the larger image. As a fallback, use the extracted\n        // smallest image in the srcset. Photoswipe doesn't fetch the correct img in\n        // GatsbyImage. See photoswipe/src/js/core/base.js thumbnailEl\n        // https://github.com/dimsemenov/PhotoSwipe/blob/beb4810b17e90b8b01a8331974b4c66169cd23a5/src/js/core/base.js#L157-L164\n        const imageEl = linkEl.querySelector(\"picture img\")\n        const backupSrc = itemData.srcset.split(\",\")[0].split(\" \")[0]\n        itemData.msrc = imageEl.currentSrc || backupSrc\n        return itemData\n    })\n    */\n\n    // add custom attributes to pswp data\n    lightbox.addFilter(\"itemData\", (itemData, index) => {\n        // itemData.webpSrc = itemData.element.dataset.pswpWebpSrc\n        // itemData.avifSrc = itemData.element.dataset.pswpAvifSrc\n        itemData.alt = itemData.element.dataset.pswpAlt\n        return itemData\n    })\n\n    // use <picture> instead of <img> for webp images\n    lightbox.on(\"contentLoadImage\", (e) => {\n        const { content } = e\n\n        // prevent to stop the default behavior\n        e.preventDefault()\n\n        // create most broadly compatible html for webp & avif images\n        content.pictureElement = document.createElement(\"picture\")\n        \n        // const sourceAvif = document.createElement(\"source\")\n        // sourceAvif.srcset = content.data.avifSrc\n        // sourceAvif.type = \"image/avif\"\n\n        // const sourceWebp = document.createElement(\"source\")\n        // sourceWebp.srcset = content.data.webpSrc\n        // sourceWebp.type = \"image/webp\"\n\n        content.element = document.createElement(\"img\")\n        content.element.src = content.data.src\n        content.element.srcset = content.data.srcset\n        content.element.setAttribute(\"alt\", content.data.alt)\n        content.element.className = \"pswp__img\"\n\n        // content.pictureElement.appendChild(sourceAvif)\n        // content.pictureElement.appendChild(sourceWebp)\n        content.pictureElement.appendChild(content.element)\n\n        // call this since it's skipped when not doing default behavior\n        // https://github.com/dimsemenov/PhotoSwipe/blob/beb4810b17e90b8b01a8331974b4c66169cd23a5/src/js/slide/content.js#L130\n        content.updateSrcsetSizes()\n\n        content.state = \"loading\"\n\n        if (content.element.complete) {\n            content.onLoaded()\n        } else {\n            content.element.onload = () => {\n                content.onLoaded()\n            }\n\n            content.element.onerror = () => {\n                content.onError()\n            }\n        }\n    })\n\n    // by default PhotoSwipe appends <img>, but we want to append <picture>\n    lightbox.on(\"contentAppendImage\", (e) => {\n        const { content } = e\n        if (content.pictureElement && !content.pictureElement.parentNode) {\n            e.preventDefault()\n\n            /**\n             * when using compatible webp html, pswp often doesn't display image correctly due\n             * to the image width not being set. For these cases, use the sizes attribute that\n             * is the appropriately sized width to be displayed. See updateSrcsetSizes method:\n             * \n             * https://github.com/dimsemenov/PhotoSwipe/blob/beb4810b17e90b8b01a8331974b4c66169cd23a5/src/js/slide/content.js#L304-L310\n             * issue: https://github.com/dimsemenov/PhotoSwipe/issues/2005\n             * \n             * update 2024/01/02: a workaround \"fix\" was merged in but it introduces constant\n             * flickering of images even though they've been loaded\n             * PR: https://github.com/dimsemenov/PhotoSwipe/pull/2024\n             */\n            if (!content.element.style.width) {\n                content.element.style.width = content.element.sizes\n                content.element.style.height = \"auto\"\n            }\n\n            content.slide.container.appendChild(content.pictureElement)\n        }\n    })\n\n    // for next/prev navigation with <picture>\n    // by default PhotoSwipe removes <img>,\n    // but we want to remove <picture>\n    lightbox.on('contentRemove', (e) => {\n        const { content } = e;\n        if (content.pictureElement && content.pictureElement.parentNode) {\n            e.preventDefault();\n            content.pictureElement.remove();\n        }\n    });\n\n    // managing the lightbox\n    lightbox.init()\n    return () => {\n        lightbox.destroy()\n        lightbox = null\n    }\n}\n\nexport default initializeLightbox\n","import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport getJustifiedLayout from \"justified-layout\"\nimport React, { useEffect, useMemo } from \"react\"\nimport PropTypes from \"prop-types\"\nimport useResizeObserver from \"use-resize-observer\"\nimport initializeLightbox, { GALLERY_ID, getLightboxData } from \"./lightbox\"\nimport { useWindowDimensions } from \"../../utils/utils\"\n\nimport \"photoswipe/style.css\"\nimport \"./photoswipe.scss\"\nimport {\n    galleryContainer,\n    screen_desktop,\n    screen_mobile_small,\n} from \"./style.scss\"\n\nconst GALLERY_CONFIG = {\n    boxSpacing: 5,\n    containerPadding: 0,\n    targetRowHeight: 400,\n    targetRowHeightTolerance: 0.25,\n}\n\n/**\n * Returns mobile image sizes by using the galleryWidth as the image width\n * and scales down the corresponding height based on the image's aspect\n * ratio.\n * @param {int} galleryWidth - integer size of the parent gallery container\n * @param {*} imageDimensions - list of image dimensions, containing height and width\n * @returns list of objects containing height and width of each image\n */\nconst getMobileImageSizes = (galleryWidth, imageDimensions) =>\n    imageDimensions.map(({ height, width }) => {\n        const aspectRatio = width / height\n        return {\n            height: galleryWidth / aspectRatio,\n            width: galleryWidth,\n        }\n    })\n\n/**\n * Gets the image dimensions for each image based on the gallery's width.\n * On larger screens Flickr's justified layout is used.\n * The dimensions should be used with a wrapping div around the corresponding\n * image to allocate a defined height and width for the image to resize into.\n * @param {int} galleryWidth - integer size of the parent gallery container\n * @param {int} windowWidth - integer width of the viewport\n * @param {*} images - list of GatsbyImageData images\n * @returns list of objects containing the height and width for each image\n */\nconst getImageLayout = (galleryWidth, windowWidth, images) => {\n    const imageDimensions = images.map(({ image }) => {\n        const img = getImage(image)\n        return {\n            height: img.height,\n            width: img.width,\n        }\n    })\n\n    /**\n     * On small screens, display one image per row.\n     * Justified layout doesn't produce the same result (one image per row\n     * with consistent bottom margins) even with fullWidthBreakoutRowCadence\n     * due to target height and tolerance.\n     */\n    if (windowWidth <= screen_mobile_small) {\n        return {\n            boxes: getMobileImageSizes(galleryWidth, imageDimensions),\n            widowCount: 0,\n        }\n    }\n\n    const justifiedLayoutConfig = {\n        ...GALLERY_CONFIG,\n        containerWidth: galleryWidth,\n    }\n    return getJustifiedLayout(imageDimensions, justifiedLayoutConfig)\n}\n\n/**\n * Gets the loading behavior of the given image. Earlier images should be loaded\n * ASAP for a better user experience (reduce Largest Contentful Paint).\n * @param {int} windowWidth - integer width of the viewport\n * Note that this is an approximate to the actual device width.\n * @param {int} i - index of the photo in the gallery. Used to determine whether\n * to eager load the image or not.\n * @returns string \"eager\" or \"lazy\" denoting to eager or lazy loading the image\n */\nconst getImageLoadBehavior = (windowWidth, i) => {\n    // Eager load the first few photos depending on the screen size. Screen sizes\n    // smaller than desktop will have fewer images eager loaded.\n    let shouldEagerLoad = false\n    if (windowWidth < screen_desktop) {\n        shouldEagerLoad = i < 3\n    } else {\n        shouldEagerLoad = i < 6\n    }\n\n    return shouldEagerLoad ? \"eager\" : \"lazy\"\n}\n\n/**\n * Widows are images that do not take up a full row, leaving empty space to\n * the right. This component creates an empty div filling up that remaining\n * space because the className style `galleryContainer` uses justify-content\n * space-between and will cause widows to be spaced at the left and right\n * ends of the last row.\n *\n * Note: removing widows and using replacing justify-content with gap causes\n * image size issues when resizing.\n */\nconst Widow = ({ containerWidth, widowBoxes, boxSpacing }) => {\n    const height = widowBoxes[0].height\n    const width =\n        containerWidth -\n        widowBoxes.reduce((acc, cur) => acc + cur.width, 0) -\n        widowBoxes.length * boxSpacing\n    return <div style={{ height, width }} />\n}\n\nWidow.propTypes = {\n    containerWidth: PropTypes.number.isRequired,\n    widowBoxes: PropTypes.arrayOf(\n        PropTypes.shape({\n            aspectRatio: PropTypes.number,\n            height: PropTypes.number,\n            left: PropTypes.number,\n            top: PropTypes.number,\n            width: PropTypes.number,\n        })\n    ).isRequired,\n    boxSpacing: PropTypes.number.isRequired,\n}\n\nconst Gallery = ({ fluidImages }) => {\n    const { ref: containerRef, width } = useResizeObserver()\n    const { width: windowWidth } = useWindowDimensions()\n\n    const galleryLayout = useMemo(() => {\n        return width && windowWidth\n            ? getImageLayout(width, windowWidth, fluidImages)\n            : null\n    }, [fluidImages, width, windowWidth])\n\n    useEffect(initializeLightbox, [])\n\n    return (\n        <div ref={containerRef} className={galleryContainer} id={GALLERY_ID}>\n            {galleryLayout &&\n                fluidImages.map(({ alt, image }, i) => (\n                    <a\n                        key={image.id}\n                        rel=\"noreferrer\"\n                        {...getLightboxData(alt, image)}\n                        style={{\n                            height: galleryLayout.boxes[i].height,\n                            width: galleryLayout.boxes[i].width,\n                            marginBottom: GALLERY_CONFIG.boxSpacing,\n                        }}\n                    >\n                        <GatsbyImage\n                            image={getImage(image)}\n                            alt={alt}\n                            loading={getImageLoadBehavior(windowWidth, i)}\n                        />\n                    </a>\n                ))}\n            {galleryLayout &&\n                galleryLayout.widowCount > 0 &&\n                galleryLayout.widowCount < fluidImages.length && (\n                    <Widow\n                        containerWidth={width}\n                        widowBoxes={galleryLayout.boxes.slice(\n                            galleryLayout.boxes.length -\n                                galleryLayout.widowCount\n                        )}\n                        boxSpacing={GALLERY_CONFIG.boxSpacing}\n                    />\n                )}\n        </div>\n    )\n}\n\nGallery.propTypes = {\n    fluidImages: PropTypes.arrayOf(\n        PropTypes.shape({\n            alt: PropTypes.string.isRequired,\n            type: PropTypes.string,\n            image: PropTypes.shape(\n                {\n                    id: PropTypes.string.isRequired,\n                    childImageSharp: PropTypes.shape({\n                        gatsbyImageData: PropTypes.shape({\n                            height: PropTypes.number,\n                            images: PropTypes.shape({\n                                fallback: PropTypes.shape({\n                                    src: PropTypes.string,\n                                    srcSet: PropTypes.string,\n                                    sizes: PropTypes.string,\n                                }),\n                                sources: PropTypes.arrayOf(\n                                    PropTypes.shape({\n                                        srcSet: PropTypes.string,\n                                        type: PropTypes.string,\n                                        sizes: PropTypes.string,\n                                    })\n                                ),\n                            }),\n                            layout: PropTypes.string,\n                            width: PropTypes.number,\n                        }).isRequired,\n                    }).isRequired,\n                }.isRequired\n            ),\n        })\n    ).isRequired,\n}\n\nexport default Gallery\n","// extracted by mini-css-extract-plugin\nexport var galleryContainer = \"style--galleryContainer--1d7f8\";\nexport var screen_desktop = \"1025\";\nexport var screen_mobile_small = \"400\";","/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n'use strict';\n\nvar Row = require('./row');\n\n/**\n * Create a new, empty row.\n *\n * @method createNewRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @return A new, empty row of the type specified by this layout.\n */\n\nfunction createNewRow(layoutConfig, layoutData) {\n\n\tvar isBreakoutRow;\n\n\t// Work out if this is a full width breakout row\n\tif (layoutConfig.fullWidthBreakoutRowCadence !== false) {\n\t\tif (((layoutData._rows.length + 1) % layoutConfig.fullWidthBreakoutRowCadence) === 0) {\n\t\t\tisBreakoutRow = true;\n\t\t}\n\t}\n\n\treturn new Row({\n\t\ttop: layoutData._containerHeight,\n\t\tleft: layoutConfig.containerPadding.left,\n\t\twidth: layoutConfig.containerWidth - layoutConfig.containerPadding.left - layoutConfig.containerPadding.right,\n\t\tspacing: layoutConfig.boxSpacing.horizontal,\n\t\ttargetRowHeight: layoutConfig.targetRowHeight,\n\t\ttargetRowHeightTolerance: layoutConfig.targetRowHeightTolerance,\n\t\tedgeCaseMinRowHeight: 0.5 * layoutConfig.targetRowHeight,\n\t\tedgeCaseMaxRowHeight: 2 * layoutConfig.targetRowHeight,\n\t\trightToLeft: false,\n\t\tisBreakoutRow: isBreakoutRow,\n\t\twidowLayoutStyle: layoutConfig.widowLayoutStyle\n\t});\n}\n\n/**\n * Add a completed row to the layout.\n * Note: the row must have already been completed.\n *\n * @method addRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param row {Row} The row to add.\n * @return {Array} Each item added to the row.\n */\n\nfunction addRow(layoutConfig, layoutData, row) {\n\n\tlayoutData._rows.push(row);\n\tlayoutData._layoutItems = layoutData._layoutItems.concat(row.getItems());\n\n\t// Increment the container height\n\tlayoutData._containerHeight += row.height + layoutConfig.boxSpacing.vertical;\n\n\treturn row.items;\n}\n\n/**\n * Calculate the current layout for all items in the list that require layout.\n * \"Layout\" means geometry: position within container and size\n *\n * @method computeLayout\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param itemLayoutData {Array} Array of items to lay out, with data required to lay out each item\n * @return {Object} The newly-calculated layout, containing the new container height, and lists of layout items\n */\n\nfunction computeLayout(layoutConfig, layoutData, itemLayoutData) {\n\n\tvar laidOutItems = [],\n\t\titemAdded,\n\t\tcurrentRow,\n\t\tnextToLastRowHeight;\n\n\t// Apply forced aspect ratio if specified, and set a flag.\n\tif (layoutConfig.forceAspectRatio) {\n\t\titemLayoutData.forEach(function (itemData) {\n\t\t\titemData.forcedAspectRatio = true;\n\t\t\titemData.aspectRatio = layoutConfig.forceAspectRatio;\n\t\t});\n\t}\n\n\t// Loop through the items\n\titemLayoutData.some(function (itemData, i) {\n\n\t\tif (isNaN(itemData.aspectRatio)) {\n\t\t\tthrow new Error(\"Item \" + i + \" has an invalid aspect ratio\");\n\t\t}\n\n\t\t// If not currently building up a row, make a new one.\n\t\tif (!currentRow) {\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t}\n\n\t\t// Attempt to add item to the current row.\n\t\titemAdded = currentRow.addItem(itemData);\n\n\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t// Row is filled; add it and start a new one\n\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\n\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\tcurrentRow = null;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\n\t\t\t// Item was rejected; add it to its own row\n\t\t\tif (!itemAdded) {\n\n\t\t\t\titemAdded = currentRow.addItem(itemData);\n\n\t\t\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t\t\t// If the rejected item fills a row on its own, add the row and start another new one\n\t\t\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\t\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\t\t\tcurrentRow = null;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\t// Handle any leftover content (orphans) depending on where they lie\n\t// in this layout update, and in the total content set.\n\tif (currentRow && currentRow.getItems().length && layoutConfig.showWidows) {\n\n\t\t// Last page of all content or orphan suppression is suppressed; lay out orphans.\n\t\tif (layoutData._rows.length) {\n\n\t\t\t// Only Match previous row's height if it exists and it isn't a breakout row\n\t\t\tif (layoutData._rows[layoutData._rows.length - 1].isBreakoutRow) {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].targetRowHeight;\n\t\t\t} else {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].height;\n\t\t\t}\n\n\t\t\tcurrentRow.forceComplete(false, nextToLastRowHeight);\n\n\t\t} else {\n\n\t\t\t// ...else use target height if there is no other row height to reference.\n\t\t\tcurrentRow.forceComplete(false);\n\n\t\t}\n\n\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\tlayoutConfig._widowCount = currentRow.getItems().length;\n\n\t}\n\n\t// We need to clean up the bottom container padding\n\t// First remove the height added for box spacing\n\tlayoutData._containerHeight = layoutData._containerHeight - layoutConfig.boxSpacing.vertical;\n\t// Then add our bottom container padding\n\tlayoutData._containerHeight = layoutData._containerHeight + layoutConfig.containerPadding.bottom;\n\n\treturn {\n\t\tcontainerHeight: layoutData._containerHeight,\n\t\twidowCount: layoutConfig._widowCount,\n\t\tboxes: layoutData._layoutItems\n\t};\n\n}\n\n/**\n * Takes in a bunch of box data and config. Returns\n * geometry to lay them out in a justified view.\n *\n * @method covertSizesToAspectRatios\n * @param sizes {Array} Array of objects with widths and heights\n * @return {Array} A list of aspect ratios\n */\n\nmodule.exports = function (input, config) {\n\tvar layoutConfig = {};\n\tvar layoutData = {};\n\n\t// Defaults\n\tvar defaults = {\n\t\tcontainerWidth: 1060,\n\t\tcontainerPadding: 10,\n\t\tboxSpacing: 10,\n\t\ttargetRowHeight: 320,\n\t\ttargetRowHeightTolerance: 0.25,\n\t\tmaxNumRows: Number.POSITIVE_INFINITY,\n\t\tforceAspectRatio: false,\n\t\tshowWidows: true,\n\t\tfullWidthBreakoutRowCadence: false,\n\t\twidowLayoutStyle: 'left'\n\t};\n\n\tvar containerPadding = {};\n\tvar boxSpacing = {};\n\n\tconfig = config || {};\n\n\t// Merge defaults and config passed in\n\tlayoutConfig = Object.assign(defaults, config);\n\n\t// Sort out padding and spacing values\n\tcontainerPadding.top = (!isNaN(parseFloat(layoutConfig.containerPadding.top))) ? layoutConfig.containerPadding.top : layoutConfig.containerPadding;\n\tcontainerPadding.right = (!isNaN(parseFloat(layoutConfig.containerPadding.right))) ? layoutConfig.containerPadding.right : layoutConfig.containerPadding;\n\tcontainerPadding.bottom = (!isNaN(parseFloat(layoutConfig.containerPadding.bottom))) ? layoutConfig.containerPadding.bottom : layoutConfig.containerPadding;\n\tcontainerPadding.left = (!isNaN(parseFloat(layoutConfig.containerPadding.left))) ? layoutConfig.containerPadding.left : layoutConfig.containerPadding;\n\tboxSpacing.horizontal = (!isNaN(parseFloat(layoutConfig.boxSpacing.horizontal))) ? layoutConfig.boxSpacing.horizontal : layoutConfig.boxSpacing;\n\tboxSpacing.vertical = (!isNaN(parseFloat(layoutConfig.boxSpacing.vertical))) ? layoutConfig.boxSpacing.vertical : layoutConfig.boxSpacing;\n\n\tlayoutConfig.containerPadding = containerPadding;\n\tlayoutConfig.boxSpacing = boxSpacing;\n\n\t// Local\n\tlayoutData._layoutItems = [];\n\tlayoutData._awakeItems = [];\n\tlayoutData._inViewportItems = [];\n\tlayoutData._leadingOrphans = [];\n\tlayoutData._trailingOrphans = [];\n\tlayoutData._containerHeight = layoutConfig.containerPadding.top;\n\tlayoutData._rows = [];\n\tlayoutData._orphans = [];\n\tlayoutConfig._widowCount = 0;\n\n\t// Convert widths and heights to aspect ratios if we need to\n\treturn computeLayout(layoutConfig, layoutData, input.map(function (item) {\n\t\tif (item.width && item.height) {\n\t\t\treturn { aspectRatio: item.width / item.height };\n\t\t} else {\n\t\t\treturn { aspectRatio: item };\n\t\t}\n\t}));\n};\n","/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n/**\n * Row\n * Wrapper for each row in a justified layout.\n * Stores relevant values and provides methods for calculating layout of individual rows.\n *\n * @param {Object} layoutConfig - The same as that passed\n * @param {Object} Initialization parameters. The following are all required:\n * @param params.top {Number} Top of row, relative to container\n * @param params.left {Number} Left side of row relative to container (equal to container left padding)\n * @param params.width {Number} Width of row, not including container padding\n * @param params.spacing {Number} Horizontal spacing between items\n * @param params.targetRowHeight {Number} Layout algorithm will aim for this row height\n * @param params.targetRowHeightTolerance {Number} Row heights may vary +/- (`targetRowHeight` x `targetRowHeightTolerance`)\n * @param params.edgeCaseMinRowHeight {Number} Absolute minimum row height for edge cases that cannot be resolved within tolerance.\n * @param params.edgeCaseMaxRowHeight {Number} Absolute maximum row height for edge cases that cannot be resolved within tolerance.\n * @param params.isBreakoutRow {Boolean} Is this row in particular one of those breakout rows? Always false if it's not that kind of photo list\n * @param params.widowLayoutStyle {String} If widows are visible, how should they be laid out?\n * @constructor\n */\n\nvar Row = module.exports = function (params) {\n\n\t// Top of row, relative to container\n\tthis.top = params.top;\n\n\t// Left side of row relative to container (equal to container left padding)\n\tthis.left = params.left;\n\n\t// Width of row, not including container padding\n\tthis.width = params.width;\n\n\t// Horizontal spacing between items\n\tthis.spacing = params.spacing;\n\n\t// Row height calculation values\n\tthis.targetRowHeight = params.targetRowHeight;\n\tthis.targetRowHeightTolerance = params.targetRowHeightTolerance;\n\tthis.minAspectRatio = this.width / params.targetRowHeight * (1 - params.targetRowHeightTolerance);\n\tthis.maxAspectRatio = this.width / params.targetRowHeight * (1 + params.targetRowHeightTolerance);\n\n\t// Edge case row height minimum/maximum\n\tthis.edgeCaseMinRowHeight = params.edgeCaseMinRowHeight;\n\tthis.edgeCaseMaxRowHeight = params.edgeCaseMaxRowHeight;\n\n\t// Widow layout direction\n\tthis.widowLayoutStyle = params.widowLayoutStyle;\n\n\t// Full width breakout rows\n\tthis.isBreakoutRow = params.isBreakoutRow;\n\n\t// Store layout data for each item in row\n\tthis.items = [];\n\n\t// Height remains at 0 until it's been calculated\n\tthis.height = 0;\n\n};\n\nRow.prototype = {\n\n\t/**\n\t * Attempt to add a single item to the row.\n\t * This is the heart of the justified algorithm.\n\t * This method is direction-agnostic; it deals only with sizes, not positions.\n\t *\n\t * If the item fits in the row, without pushing row height beyond min/max tolerance,\n\t * the item is added and the method returns true.\n\t *\n\t * If the item leaves row height too high, there may be room to scale it down and add another item.\n\t * In this case, the item is added and the method returns true, but the row is incomplete.\n\t *\n\t * If the item leaves row height too short, there are too many items to fit within tolerance.\n\t * The method will either accept or reject the new item, favoring the resulting row height closest to within tolerance.\n\t * If the item is rejected, left/right padding will be required to fit the row height within tolerance;\n\t * if the item is accepted, top/bottom cropping will be required to fit the row height within tolerance.\n\t *\n\t * @method addItem\n\t * @param itemData {Object} Item layout data, containing item aspect ratio.\n\t * @return {Boolean} True if successfully added; false if rejected.\n\t */\n\n\taddItem: function (itemData) {\n\n\t\tvar newItems = this.items.concat(itemData),\n\t\t\t// Calculate aspect ratios for items only; exclude spacing\n\t\t\trowWidthWithoutSpacing = this.width - (newItems.length - 1) * this.spacing,\n\t\t\tnewAspectRatio = newItems.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0),\n\t\t\ttargetAspectRatio = rowWidthWithoutSpacing / this.targetRowHeight,\n\t\t\tpreviousRowWidthWithoutSpacing,\n\t\t\tpreviousAspectRatio,\n\t\t\tpreviousTargetAspectRatio;\n\n\t\t// Handle big full-width breakout photos if we're doing them\n\t\tif (this.isBreakoutRow) {\n\t\t\t// Only do it if there's no other items in this row\n\t\t\tif (this.items.length === 0) {\n\t\t\t\t// Only go full width if this photo is a square or landscape\n\t\t\t\tif (itemData.aspectRatio >= 1) {\n\t\t\t\t\t// Close out the row with a full width photo\n\t\t\t\t\tthis.items.push(itemData);\n\t\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / itemData.aspectRatio, 'justify');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (newAspectRatio < this.minAspectRatio) {\n\n\t\t\t// New aspect ratio is too narrow / scaled row height is too tall.\n\t\t\t// Accept this item and leave row open for more items.\n\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\treturn true;\n\n\t\t} else if (newAspectRatio > this.maxAspectRatio) {\n\n\t\t\t// New aspect ratio is too wide / scaled row height will be too short.\n\t\t\t// Accept item if the resulting aspect ratio is closer to target than it would be without the item.\n\t\t\t// NOTE: Any row that falls into this block will require cropping/padding on individual items.\n\n\t\t\tif (this.items.length === 0) {\n\n\t\t\t\t// When there are no existing items, force acceptance of the new item and complete the layout.\n\t\t\t\t// This is the pano special case.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// Calculate width/aspect ratio for row before adding new item\n\t\t\tpreviousRowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing;\n\t\t\tpreviousAspectRatio = this.items.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0);\n\t\t\tpreviousTargetAspectRatio = previousRowWidthWithoutSpacing / this.targetRowHeight;\n\n\t\t\tif (Math.abs(newAspectRatio - targetAspectRatio) > Math.abs(previousAspectRatio - previousTargetAspectRatio)) {\n\n\t\t\t\t// Row with new item is us farther away from target than row without; complete layout and reject item.\n\t\t\t\tthis.completeLayout(previousRowWidthWithoutSpacing / previousAspectRatio, 'justify');\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Row with new item is us closer to target than row without;\n\t\t\t\t// accept the new item and complete the row layout.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// New aspect ratio / scaled row height is within tolerance;\n\t\t\t// accept the new item and complete the row layout.\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\treturn true;\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Check if a row has completed its layout.\n\t *\n\t * @method isLayoutComplete\n\t * @return {Boolean} True if complete; false if not.\n\t */\n\n\tisLayoutComplete: function () {\n\t\treturn this.height > 0;\n\t},\n\n\t/**\n\t * Set row height and compute item geometry from that height.\n\t * Will justify items within the row unless instructed not to.\n\t *\n\t * @method completeLayout\n\t * @param newHeight {Number} Set row height to this value.\n\t * @param widowLayoutStyle {String} How should widows display? Supported: left | justify | center\n\t */\n\n\tcompleteLayout: function (newHeight, widowLayoutStyle) {\n\n\t\tvar itemWidthSum = this.left,\n\t\t\trowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t\tclampedToNativeRatio,\n\t\t\tclampedHeight,\n\t\t\terrorWidthPerItem,\n\t\t\troundedCumulativeErrors,\n\t\t\tsingleItemGeometry,\n\t\t\tcenterOffset;\n\n\t\t// Justify unless explicitly specified otherwise.\n\t\tif (typeof widowLayoutStyle === 'undefined' || ['justify', 'center', 'left'].indexOf(widowLayoutStyle) < 0) {\n\t\t\twidowLayoutStyle = 'left';\n\t\t}\n\n\t\t// Clamp row height to edge case minimum/maximum.\n\t\tclampedHeight = Math.max(this.edgeCaseMinRowHeight, Math.min(newHeight, this.edgeCaseMaxRowHeight));\n\n\t\tif (newHeight !== clampedHeight) {\n\n\t\t\t// If row height was clamped, the resulting row/item aspect ratio will be off,\n\t\t\t// so force it to fit the width (recalculate aspectRatio to match clamped height).\n\t\t\t// NOTE: this will result in cropping/padding commensurate to the amount of clamping.\n\t\t\tthis.height = clampedHeight;\n\t\t\tclampedToNativeRatio = (rowWidthWithoutSpacing / clampedHeight) / (rowWidthWithoutSpacing / newHeight);\n\n\t\t} else {\n\n\t\t\t// If not clamped, leave ratio at 1.0.\n\t\t\tthis.height = newHeight;\n\t\t\tclampedToNativeRatio = 1.0;\n\n\t\t}\n\n\t\t// Compute item geometry based on newHeight.\n\t\tthis.items.forEach(function (item) {\n\n\t\t\titem.top = this.top;\n\t\t\titem.width = item.aspectRatio * this.height * clampedToNativeRatio;\n\t\t\titem.height = this.height;\n\n\t\t\t// Left-to-right.\n\t\t\t// TODO right to left\n\t\t\t// item.left = this.width - itemWidthSum - item.width;\n\t\t\titem.left = itemWidthSum;\n\n\t\t\t// Increment width.\n\t\t\titemWidthSum += item.width + this.spacing;\n\n\t\t}, this);\n\n\t\t// If specified, ensure items fill row and distribute error\n\t\t// caused by rounding width and height across all items.\n\t\tif (widowLayoutStyle === 'justify') {\n\n\t\t\titemWidthSum -= (this.spacing + this.left);\n\n\t\t\terrorWidthPerItem = (itemWidthSum - this.width) / this.items.length;\n\t\t\troundedCumulativeErrors = this.items.map(function (item, i) {\n\t\t\t\treturn Math.round((i + 1) * errorWidthPerItem);\n\t\t\t});\n\n\n\t\t\tif (this.items.length === 1) {\n\n\t\t\t\t// For rows with only one item, adjust item width to fill row.\n\t\t\t\tsingleItemGeometry = this.items[0];\n\t\t\t\tsingleItemGeometry.width -= Math.round(errorWidthPerItem);\n\n\t\t\t} else {\n\n\t\t\t\t// For rows with multiple items, adjust item width and shift items to fill the row,\n\t\t\t\t// while maintaining equal spacing between items in the row.\n\t\t\t\tthis.items.forEach(function (item, i) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\titem.left -= roundedCumulativeErrors[i - 1];\n\t\t\t\t\t\titem.width -= (roundedCumulativeErrors[i] - roundedCumulativeErrors[i - 1]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.width -= roundedCumulativeErrors[i];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} else if (widowLayoutStyle === 'center') {\n\n\t\t\t// Center widows\n\t\t\tcenterOffset = (this.width - itemWidthSum) / 2;\n\n\t\t\tthis.items.forEach(function (item) {\n\t\t\t\titem.left += centerOffset + this.spacing;\n\t\t\t}, this);\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Force completion of row layout with current items.\n\t *\n\t * @method forceComplete\n\t * @param fitToWidth {Boolean} Stretch current items to fill the row width.\n\t *                             This will likely result in padding.\n\t * @param fitToWidth {Number}\n\t */\n\n\tforceComplete: function (fitToWidth, rowHeight) {\n\n\t\t// TODO Handle fitting to width\n\t\t// var rowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t// \tcurrentAspectRatio = this.items.reduce(function (sum, item) {\n\t\t// \t\treturn sum + item.aspectRatio;\n\t\t// \t}, 0);\n\n\t\tif (typeof rowHeight === 'number') {\n\n\t\t\tthis.completeLayout(rowHeight, this.widowLayoutStyle);\n\n\t\t} else {\n\n\t\t\t// Complete using target row height.\n\t\t\tthis.completeLayout(this.targetRowHeight, this.widowLayoutStyle);\n\t\t}\n\n\t},\n\n\t/**\n\t * Return layout data for items within row.\n\t * Note: returns actual list, not a copy.\n\t *\n\t * @method getItems\n\t * @return Layout data for items within row.\n\t */\n\n\tgetItems: function () {\n\t\treturn this.items;\n\t}\n\n};\n"],"names":["extractSize","entry","boxProp","sizeType","contentRect","useResizeObserver","opts","onResize","onResizeRef","useRef","undefined","current","round","Math","resizeObserverRef","_useState","useState","width","height","size","setSize","didUnmount","useEffect","previous","refCallback","subscriber","refOrElement","lastReportRef","refOrElementRef","cbElementRef","evaluateSubscription","useCallback","cbElement","element","Element","cleanup","useResolvedElement","box","instance","ResizeObserver","entries","reportedWidth","reportedHeight","newWidth","newHeight","newSize","observe","unobserve","ref","useMemo","createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","PhotoSwipeEvent","constructor","type","details","this","defaultPrevented","Object","assign","preventDefault","Eventable","_listeners","_filters","pswp","options","addFilter","name","fn","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","push","sort","f1","f2","removeFilter","filter","applyFilters","args","_this$_filters$name3","forEach","apply","on","_this$_listeners$name","_this$pswp2","off","_this$pswp3","listener","dispatch","_this$_listeners$name2","event","call","Placeholder","imageSrc","container","imgEl","decoding","alt","src","setAttribute","setDisplayedSize","transformOrigin","transform","x","y","scale","propValue","toTransformString","destroy","_this$element","parentNode","remove","Content","itemData","index","data","placeholder","slide","displayedImageWidth","displayedImageHeight","Number","isAttached","hasSlide","isDecoding","state","content","removePlaceholder","keepPlaceholder","setTimeout","load","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isFirstSlide","isImageContent","loadImage","innerHTML","html","updateContentSize","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","isActive","heavyAppended","append","displayError","isError","isLoading","isInitialSizeUpdate","isZoomable","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","innerText","errorMsg","supportsDecode","decode","catch","finally","appendImage","activate","holderElement","deactivate","parsePaddingOption","prop","viewportSize","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","ZoomLevel","panAreaSize","elementSize","fit","fill","vFill","initial","secondary","max","min","update","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","currZoomLevel","lazyLoadData","createContentFromData","zoomLevel","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","getViewportSize","getPanAreaSize","ceil","PhotoSwipeBase","getNumItems","_this$options","numItems","dataSource","length","items","_getGalleryDOMElements","gallery","getItemData","_this$options2","dataSourceItem","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","PhotoSwipeLightbox","super","_uid","shouldOpen","_preloadedContent","onThumbnailsClick","bind","init","gallerySelector","addEventListener","e","button","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","currentTarget","loadAndOpen","getClickedIndexFn","clickedTarget","target","clickedChildIndex","findIndex","child","contains","galleryElements","initialPointerPos","preload","promiseArray","pswpModuleType","pswpModule","prototype","goTo","Promise","resolve","Error","openPromise","preloadFirstSlide","lazyLoadSlide","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","contentLoader","addToCache","removeEventListener","PHOTOSWIPE_OPTIONS","zoom","counter","bgOpacity","showHideAnimationType","imageClickAction","tapAction","showAnimationDuration","hideAnimationDuration","top","bottom","left","right","GALLERY_ID","initializeLightbox","lightbox","pswpAlt","pictureElement","GALLERY_CONFIG","boxSpacing","containerPadding","targetRowHeight","targetRowHeightTolerance","getMobileImageSizes","galleryWidth","imageDimensions","map","_ref","getImageLoadBehavior","windowWidth","i","shouldEagerLoad","Widow","_ref3","containerWidth","widowBoxes","reduce","acc","cur","React","_ref4","fluidImages","containerRef","useWindowDimensions","galleryLayout","getImageLayout","images","_ref2","img","getImage","boxes","widowCount","justifiedLayoutConfig","getJustifiedLayout","id","_ref5","key","rel","getLightboxData","gatsbyImage","fallback","srcSet","marginBottom","GatsbyImage","loading","Row","createNewRow","layoutConfig","layoutData","isBreakoutRow","fullWidthBreakoutRowCadence","_rows","_containerHeight","spacing","horizontal","edgeCaseMinRowHeight","edgeCaseMaxRowHeight","rightToLeft","widowLayoutStyle","addRow","row","_layoutItems","concat","getItems","vertical","exports","input","config","defaults","maxNumRows","POSITIVE_INFINITY","forceAspectRatio","showWidows","isNaN","parseFloat","_awakeItems","_inViewportItems","_leadingOrphans","_trailingOrphans","_orphans","_widowCount","itemLayoutData","itemAdded","currentRow","nextToLastRowHeight","laidOutItems","forcedAspectRatio","aspectRatio","some","addItem","isLayoutComplete","forceComplete","containerHeight","computeLayout","item","params","minAspectRatio","maxAspectRatio","previousRowWidthWithoutSpacing","previousAspectRatio","previousTargetAspectRatio","newItems","rowWidthWithoutSpacing","newAspectRatio","sum","targetAspectRatio","completeLayout","abs","clampedToNativeRatio","clampedHeight","errorWidthPerItem","roundedCumulativeErrors","centerOffset","itemWidthSum","indexOf","fitToWidth","rowHeight"],"sourceRoot":""}