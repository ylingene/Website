{"version":3,"sources":["webpack://lingene/./src/components/header/header.js","webpack://lingene/./src/components/header/style.scss","webpack://lingene/./src/components/portfolio/style.scss","webpack://lingene/./src/components/portfolio/portfolio.js","webpack://lingene/./src/pages/illustrations.js"],"names":["cx","classNames","borderBlue","borderGreen","borderRed","getBorderClasses","accentColor","ACCENT_BLUE","ACCENT_GREEN","ACCENT_RED","Header","title","sectionTitle","description","className","defaultProps","filters","filterStyle","filterActive","Filters","filterValues","activeFilter","onFilterUpdate","map","filter","key","onClick","onMouseDown","e","preventDefault","headerData","fluidImages","allFilters","concat","useState","updateActiveFilter","displayedImages","setDisplayedImages","useEffect","image","type","length","data","allFile","nodes","childrenYaml"],"mappings":"kLAeMA,EAAKC,SAAgB,CACzBC,WCbsB,2BDctBC,YCfuB,4BDgBvBC,UCjBqB,4BDoBjBC,EAAmB,SAACC,GAAD,OACrBN,EAAG,CACCE,WAAYI,IAAgBC,KAC5BJ,YAAaG,IAAgBE,KAC7BJ,UAAWE,IAAgBG,QAI7BC,EAAS,SAAC,GAAD,IAAGJ,EAAH,EAAGA,YAAaK,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,YAArC,OACb,0BAAQC,UCzBU,wBD0BhB,uBAAKA,UCzBU,uBD0Bb,uBAAKA,UAAWT,EAAiBC,KACjC,2BACE,0BAAKK,GACL,0BAAKC,OAGNC,GAAe,uBAAKC,UClCF,6BDkCgCD,KAIzDH,EAAOK,aAAe,CACpBF,YAAY,IAUd,S,2IElDWG,EAAU,wBCYfhB,EAAKC,SAAgB,CACzBgB,YDfkB,uBCgBlBC,aDfwB,6BCgBxBF,YAGIG,EAAU,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eAC7C,OACE,uBAAKR,UAAWE,GACbI,EAAaG,KAAI,SAACC,GACjB,OACE,0BACEC,IAAKD,EACLV,UAAWd,EAAG,CACZiB,aAAa,EACbC,aAAcM,IAAWH,IAE3BK,QAAS,kBAAMJ,EAAeE,IAC9BG,YAAa,SAACC,GAAD,OAAOA,EAAEC,mBAErBL,QA+Db,EAjDkB,SAAC,GAA2D,IAAzDX,EAAwD,EAAxDA,YAAaiB,EAA2C,EAA3CA,WAA2C,IAA/Bd,eAA+B,MAArB,GAAqB,EAAjBe,EAAiB,EAAjBA,YACpDC,EAAa,CAAC,OAAOC,OAAOjB,GAClC,GAA2CkB,cAASF,EAAW,IAAxDX,EAAP,KAAqBc,EAArB,KACA,GAA8CD,cAASH,GAAhDK,EAAP,KAAwBC,EAAxB,KAaA,OAXAC,gBAAU,WAEND,EADmB,QAAjBhB,EACiBU,EAGjBA,EAAYP,QAAO,SAACe,GAAD,OAAWA,EAAMC,OAASnB,QAGhD,CAACA,EAAcU,IAIhB,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEpB,MAAOmB,EAAWlB,aAClBC,YAAaiB,EAAWjB,aAAeA,IAEzC,gBAAC,IAAWiB,GACXd,EAAQyB,OAAS,GAChB,gBAACtB,EAAD,CACEC,aAAcY,EACdX,aAAcA,EACdC,eAAgBa,IAGpB,gBAAC,IAAD,CAASJ,YAAaK,O,2EC7C5B,UA3BsB,SAAC,GAAc,IAAZM,EAAW,EAAXA,KACvB,OACE,gBAAC,IAAD,CACE7B,YAAY,6DACZiB,WAAY,CACVxB,YAAaE,KACbG,MAAO,UACPC,aAAc,gBACdC,YAAa,gBAEfkB,YAAaW,EAAKC,QAAQC,MAAM,GAAGC","file":"component---src-pages-illustrations-js-208b4bfe87468af6051e.js","sourcesContent":["import classNames from \"classnames/bind\"\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED } from \"../../utils/defs\"\n\nimport {\n  borderBlue,\n  borderGreen,\n  borderRed,\n  description as descriptionStyle,\n  header as headerStyle,\n  title as titleStyle,\n} from \"./style.scss\"\n\nconst cx = classNames.bind({\n  borderBlue,\n  borderGreen,\n  borderRed,\n})\n\nconst getBorderClasses = (accentColor) => (\n    cx({\n        borderBlue: accentColor === ACCENT_BLUE,\n        borderGreen: accentColor === ACCENT_GREEN,\n        borderRed: accentColor === ACCENT_RED,\n    })\n)\n\nconst Header = ({ accentColor, title, sectionTitle, description }) => (\n  <header className={headerStyle}>\n    <div className={titleStyle}>\n      <div className={getBorderClasses(accentColor)}></div>\n      <div>\n        <h3>{title}</h3>\n        <h1>{sectionTitle}</h1>\n      </div>\n    </div>\n    {!!description && <div className={descriptionStyle}>{description}</div>}\n  </header>\n)\n\nHeader.defaultProps = {\n  description: ``,\n}\n\nHeader.propTypes = {\n  accentColor: PropTypes.oneOf([ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED]).isRequired,\n  title: PropTypes.string.isRequired,\n  sectionTitle: PropTypes.string.isRequired,\n  description: PropTypes.string,\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport var borderRed = \"style--borderRed--Ky7vy\";\nexport var borderGreen = \"style--borderGreen--aGofA\";\nexport var borderBlue = \"style--borderBlue--2KvrE\";\nexport var description = \"style--description--Q-x-7\";\nexport var header = \"style--header--3LH-S\";\nexport var title = \"style--title--3pXfs\";","// extracted by mini-css-extract-plugin\nexport var filter = \"style--filter--17_Ie\";\nexport var filterActive = \"style--filterActive--3OvIA\";\nexport var filters = \"style--filters--2q2v1\";","import classNames from \"classnames/bind\"\nimport React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Container from \"../container/container\"\nimport Gallery from \"../gallery/gallery\"\nimport Header from \"../header/header\"\nimport Seo from \"../seo\"\n\nimport { \n  filter as filterStyle,\n  filterActive,\n  filters,\n} from \"./style.scss\"\n\nconst cx = classNames.bind({\n  filterStyle,\n  filterActive,\n  filters,\n})\n\nconst Filters = ({ filterValues, activeFilter, onFilterUpdate }) => {\n  return (\n    <div className={filters}>\n      {filterValues.map((filter) => {\n        return (\n          <button\n            key={filter}\n            className={cx({\n              filterStyle: true,\n              filterActive: filter === activeFilter,\n            })}\n            onClick={() => onFilterUpdate(filter)}\n            onMouseDown={(e) => e.preventDefault()}\n          >\n            {filter}\n          </button>\n        )\n      })}\n    </div>\n  )\n}\n\nFilters.propTypes = {\n  filterValues: PropTypes.arrayOf(PropTypes.string).isRequired,\n  activeFilter: PropTypes.string.isRequired,\n  onFilterUpdate: PropTypes.func.isRequired,\n}\n\nconst Portfolio = ({ description, headerData, filters = [], fluidImages}) => {\n  const allFilters = [\"all\"].concat(filters)\n  const [activeFilter, updateActiveFilter] = useState(allFilters[0])\n  const [displayedImages, setDisplayedImages] = useState(fluidImages)\n\n  useEffect(() => {\n    if (activeFilter === \"all\") {\n      setDisplayedImages(fluidImages)\n    } else {\n      setDisplayedImages(\n        fluidImages.filter((image) => image.type === activeFilter)\n      )\n    }\n  }, [activeFilter, fluidImages])\n\n\n  return (\n    <Container>\n      <Seo\n        title={headerData.sectionTitle}\n        description={headerData.description || description}\n      />\n      <Header {...headerData} />\n      {filters.length > 0 && (\n        <Filters\n          filterValues={allFilters}\n          activeFilter={activeFilter}\n          onFilterUpdate={updateActiveFilter}\n        />\n      )}\n      <Gallery fluidImages={displayedImages} />\n    </Container>\n  )\n}\n\nPortfolio.propTypes = {\n  description: PropTypes.string,\n  headerData: PropTypes.shape({\n    sectionTitle: PropTypes.string.isRequired,\n    description: PropTypes.string,\n  }).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.string),\n  fluidImages: PropTypes.arrayOf(\n    PropTypes.shape({\n      type: PropTypes.string,\n    })\n  ).isRequired,\n}\n\nexport default Portfolio\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_GREEN } from \"../utils/defs\"\nimport Portfolio from \"../components/portfolio/portfolio\"\n\nconst Illustrations = ({ data }) => {\n  return (\n    <Portfolio\n      description=\"Illustrations from my recent dabbling in digital painting.\"\n      headerData={{\n        accentColor: ACCENT_GREEN,\n        title: \"Gallery\",\n        sectionTitle: \"Illustrations\",\n        description: \"Coming soon.\",\n      }}\n      fluidImages={data.allFile.nodes[0].childrenYaml}\n    />\n  )\n}\n\nIllustrations.propTypes = {\n  data: PropTypes.shape({\n    allFile: PropTypes.shape({\n      nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n          childrenYaml: PropTypes.array,\n        })\n      ),\n    }),\n  }).isRequired,\n}\n\nexport default Illustrations\n\nexport const pageQuery = graphql`\n  query {\n    allFile(\n      filter: {\n        sourceInstanceName: { eq: \"galleries\" }\n        name: { eq: \"illustrations\" }\n      }\n    ) {\n      nodes {\n        childrenYaml {\n          ...GalleryImageFragment\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}