{"version":3,"file":"component---src-pages-illustrations-js-2f248739198f70b32a29.js","mappings":"kLAeA,MAAMA,EAAKC,IAAAA,KAAgB,CACvBC,WCfoB,2BDgBpBC,YCfqB,4BDgBrBC,UCfmB,4BDkBjBC,EAAoBC,GACtBN,EAAG,CACCE,WAAYI,IAAgBC,EAAAA,GAC5BJ,YAAaG,IAAgBE,EAAAA,GAC7BJ,UAAWE,IAAgBG,EAAAA,KAG7BC,EAASC,IAAA,IAAC,YAAEL,EAAW,MAAEM,EAAK,aAAEC,EAAY,YAAEC,GAAaH,EAAA,OAC7DI,EAAAA,cAAA,UAAQC,UCxBQ,wBDyBZD,EAAAA,cAAA,OAAKC,UCxBM,uBDyBPD,EAAAA,cAAA,OAAKC,UAAWX,EAAiBC,KACjCS,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAKH,GACLG,EAAAA,cAAA,UAAKF,OAGVC,GAAeC,EAAAA,cAAA,OAAKC,UCjCN,6BDiCoCF,GAChD,EAGbJ,EAAOO,aAAe,CAClBH,YAAc,IAWlB,O,gIElDWI,EAAU,wBCQrB,MAAMlB,EAAKC,IAAAA,KAAgB,CACvBkB,YDXgB,uBCYhBC,aDXsB,6BCYtBF,QACJ,IAWMG,EAAgBC,IAClB,MAAMC,EAAuBD,EAAOE,MAAKb,IAAgB,IAAf,MAAEc,GAAOd,EAC/C,MAAM,OAAEe,EAAM,MAAEC,GAAUF,EAAMG,gBAAgBC,SAChD,OAAOF,EAAQD,CAAM,IAEzB,OACIH,GACAA,EAAqBE,MAAMG,gBAAgBC,QAAQ,EAIrDC,EAAUC,IAAqD,IAApD,aAAEC,EAAY,aAAEC,EAAY,eAAEC,GAAgBH,EAC3D,OACIhB,EAAAA,cAAA,OAAKC,UAAWE,GACXc,EAAaG,KAAKC,GACfrB,EAAAA,cAAA,UACIsB,IAAKD,EACLpB,UAAWhB,EAAG,CACVmB,aAAa,EACbC,aAAcgB,IAAWH,IAE7BK,QAASA,IAAMJ,EAAeE,GAC9BG,YAAcC,GAAMA,EAAEC,kBAErBL,KAGP,EA4Ed,MAlEkBM,IAA6D,IAA5D,YAAE5B,EAAW,WAAE6B,EAAU,QAAEzB,EAAU,GAAE,YAAE0B,GAAaF,EACrE,MAAMG,EAAa,CAAC,OAAOC,OAAO5B,IAC5B,EAACe,EAAa,EAACc,IAAsBC,EAAAA,EAAAA,UAASH,EAAW,KACzD,EAACI,EAAgB,EAACC,IAAsBF,EAAAA,EAAAA,UAASJ,GAiBvD,OAVAO,EAAAA,EAAAA,YAAU,KAEFD,EADiB,QAAjBjB,EACmBW,EAGfA,EAAYR,QAAQX,GAAUA,EAAM2B,OAASnB,IAErD,GACD,CAACA,EAAcW,IAGd7B,EAAAA,cAACsC,EAAAA,EAAS,KACNtC,EAAAA,cAACuC,EAAAA,EAAG,CACA1C,MAAQ,GAAE+B,EAAW9B,gBAAgB8B,EAAW/B,QAChDE,YAAa6B,EAAW7B,aAAeA,EACvCyC,SAAU,CAACZ,EAAW9B,aAAc8B,EAAW/B,OAC/C4C,UAAWnC,EAAauB,KAE5B7B,EAAAA,cAACL,EAAAA,EAAWiC,GACXzB,EAAQuC,OAAS,GACd1C,EAAAA,cAACe,EAAO,CACJE,aAAca,EACdZ,aAAcA,EACdC,eAAgBa,IAGxBhC,EAAAA,cAAC2C,EAAAA,EAAO,CAACd,YAAaK,IACd,C,gEClEpB,UA3BsBtC,IAAe,IAAd,KAAEgD,GAAMhD,EAC3B,OACII,EAAAA,cAAC6C,EAAAA,EAAS,CACN9C,YAAY,6DACZ6B,WAAY,CACRrC,YAAaE,EAAAA,GACbI,MAAO,UACPC,aAAc,gBACdC,YAAa,gBAEjB8B,YAAae,EAAKE,QAAQC,MAAM,GAAGC,cACrC,C","sources":["webpack://lingene/./src/components/header/header.js","webpack://lingene/./src/components/header/style.scss","webpack://lingene/./src/components/portfolio/style.scss","webpack://lingene/./src/components/portfolio/portfolio.js","webpack://lingene/./src/pages/illustrations.js"],"sourcesContent":["import classNames from \"classnames/bind\"\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED } from \"../../utils/defs\"\n\nimport {\n    borderBlue,\n    borderGreen,\n    borderRed,\n    description as descriptionStyle,\n    header as headerStyle,\n    title as titleStyle,\n} from \"./style.scss\"\n\nconst cx = classNames.bind({\n    borderBlue,\n    borderGreen,\n    borderRed,\n})\n\nconst getBorderClasses = (accentColor) =>\n    cx({\n        borderBlue: accentColor === ACCENT_BLUE,\n        borderGreen: accentColor === ACCENT_GREEN,\n        borderRed: accentColor === ACCENT_RED,\n    })\n\nconst Header = ({ accentColor, title, sectionTitle, description }) => (\n    <header className={headerStyle}>\n        <div className={titleStyle}>\n            <div className={getBorderClasses(accentColor)}></div>\n            <div>\n                <h3>{title}</h3>\n                <h1>{sectionTitle}</h1>\n            </div>\n        </div>\n        {!!description && <div className={descriptionStyle}>{description}</div>}\n    </header>\n)\n\nHeader.defaultProps = {\n    description: ``,\n}\n\nHeader.propTypes = {\n    accentColor: PropTypes.oneOf([ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED])\n        .isRequired,\n    title: PropTypes.string.isRequired,\n    sectionTitle: PropTypes.string.isRequired,\n    description: PropTypes.string,\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport var borderBlue = \"style--borderBlue--225a0\";\nexport var borderGreen = \"style--borderGreen--d2779\";\nexport var borderRed = \"style--borderRed--4253e\";\nexport var description = \"style--description--829e7\";\nexport var header = \"style--header--640de\";\nexport var title = \"style--title--21839\";","// extracted by mini-css-extract-plugin\nexport var filter = \"style--filter--c0aba\";\nexport var filterActive = \"style--filterActive--d94aa\";\nexport var filters = \"style--filters--0d2dd\";","import classNames from \"classnames/bind\"\nimport React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Container from \"../container/container\"\nimport Gallery from \"../gallery/gallery\"\nimport Header from \"../header/header\"\nimport Seo from \"../seo\"\n\nimport { filter as filterStyle, filterActive, filters } from \"./style.scss\"\n\nconst cx = classNames.bind({\n    filterStyle,\n    filterActive,\n    filters,\n})\n\n/**\n * Get's the first image's image data in the list of images that is a horizontal image.\n * This image will be used for the metadata image tags when sharing on social media,\n * which generally displays in a horizontal format.\n *\n * @param {List[object]} images - list of objects that contain info about\n * each images' image src, height, and width. Used for metadata images\n * @returns object containing src, height, and width attributes\n */\nconst getMetaImage = (images) => {\n    const firstHorizontalImage = images.find(({ image }) => {\n        const { height, width } = image.childImageSharp.original\n        return width > height\n    })\n    return (\n        firstHorizontalImage &&\n        firstHorizontalImage.image.childImageSharp.original\n    )\n}\n\nconst Filters = ({ filterValues, activeFilter, onFilterUpdate }) => {\n    return (\n        <div className={filters}>\n            {filterValues.map((filter) => (\n                <button\n                    key={filter}\n                    className={cx({\n                        filterStyle: true,\n                        filterActive: filter === activeFilter,\n                    })}\n                    onClick={() => onFilterUpdate(filter)}\n                    onMouseDown={(e) => e.preventDefault()}\n                >\n                    {filter}\n                </button>\n            ))}\n        </div>\n    )\n}\n\nFilters.propTypes = {\n    filterValues: PropTypes.arrayOf(PropTypes.string).isRequired,\n    activeFilter: PropTypes.string.isRequired,\n    onFilterUpdate: PropTypes.func.isRequired,\n}\n\nconst Portfolio = ({ description, headerData, filters = [], fluidImages }) => {\n    const allFilters = [\"all\"].concat(filters)\n    const [activeFilter, updateActiveFilter] = useState(allFilters[0])\n    const [displayedImages, setDisplayedImages] = useState(fluidImages)\n\n    /**\n     * Based on the activeFilter, filter the images that are displayed\n     * determined by the image's type attribute. Updates the displayedImages,\n     * which is passed into the Gallery component\n     */\n    useEffect(() => {\n        if (activeFilter === \"all\") {\n            setDisplayedImages(fluidImages)\n        } else {\n            setDisplayedImages(\n                fluidImages.filter((image) => image.type === activeFilter)\n            )\n        }\n    }, [activeFilter, fluidImages])\n\n    return (\n        <Container>\n            <Seo\n                title={`${headerData.sectionTitle} ${headerData.title}`}\n                description={headerData.description || description}\n                keywords={[headerData.sectionTitle, headerData.title]}\n                metaImage={getMetaImage(fluidImages)}\n            />\n            <Header {...headerData} />\n            {filters.length > 0 && (\n                <Filters\n                    filterValues={allFilters}\n                    activeFilter={activeFilter}\n                    onFilterUpdate={updateActiveFilter}\n                />\n            )}\n            <Gallery fluidImages={displayedImages} />\n        </Container>\n    )\n}\n\nPortfolio.propTypes = {\n    description: PropTypes.string,\n    headerData: PropTypes.shape({\n        description: PropTypes.string,\n        sectionTitle: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    }).isRequired,\n    filters: PropTypes.arrayOf(PropTypes.string),\n    fluidImages: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            image: PropTypes.shape({\n                childImageSharp: PropTypes.shape({\n                    gatsbyImageData: PropTypes.object.isRequired,\n                    original: PropTypes.shape({\n                        src: PropTypes.string,\n                        height: PropTypes.number,\n                        width: PropTypes.number,\n                    }).isRequired,\n                }).isRequired,\n            }).isRequired,\n        })\n    ).isRequired,\n}\n\nexport default Portfolio\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_GREEN } from \"../utils/defs\"\nimport Portfolio from \"../components/portfolio/portfolio\"\n\nconst Illustrations = ({ data }) => {\n    return (\n        <Portfolio\n            description=\"Illustrations from my recent dabbling in digital painting.\"\n            headerData={{\n                accentColor: ACCENT_GREEN,\n                title: \"Gallery\",\n                sectionTitle: \"Illustrations\",\n                description: \"Coming soon.\",\n            }}\n            fluidImages={data.allFile.nodes[0].childrenYaml}\n        />\n    )\n}\n\nIllustrations.propTypes = {\n    data: PropTypes.shape({\n        allFile: PropTypes.shape({\n            nodes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    childrenYaml: PropTypes.array,\n                })\n            ),\n        }),\n    }).isRequired,\n}\n\nexport default Illustrations\n\nexport const pageQuery = graphql`\n    query {\n        allFile(\n            filter: {\n                sourceInstanceName: { eq: \"galleries\" }\n                name: { eq: \"illustrations\" }\n            }\n        ) {\n            nodes {\n                childrenYaml {\n                    ...GalleryImageFragment\n                }\n            }\n        }\n    }\n`\n"],"names":["cx","classNames","borderBlue","borderGreen","borderRed","getBorderClasses","accentColor","ACCENT_BLUE","ACCENT_GREEN","ACCENT_RED","Header","_ref","title","sectionTitle","description","React","className","defaultProps","filters","filterStyle","filterActive","getMetaImage","images","firstHorizontalImage","find","image","height","width","childImageSharp","original","Filters","_ref2","filterValues","activeFilter","onFilterUpdate","map","filter","key","onClick","onMouseDown","e","preventDefault","_ref3","headerData","fluidImages","allFilters","concat","updateActiveFilter","useState","displayedImages","setDisplayedImages","useEffect","type","Container","Seo","keywords","metaImage","length","Gallery","data","Portfolio","allFile","nodes","childrenYaml"],"sourceRoot":""}