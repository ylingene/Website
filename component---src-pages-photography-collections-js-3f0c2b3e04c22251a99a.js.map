{"version":3,"sources":["webpack://lingene/./src/components/header/header.js","webpack://lingene/./src/components/header/style.scss","webpack://lingene/./src/components/collection/style.scss","webpack://lingene/./src/components/collection/collection.js","webpack://lingene/./src/pages/photography/collections.js"],"names":["cx","classNames","borderBlue","borderGreen","borderRed","getBorderClasses","accentColor","ACCENT_BLUE","ACCENT_GREEN","ACCENT_RED","Header","title","sectionTitle","description","className","defaultProps","postDetail","getMetaImageFromPost","posts","length","frontmatter","hero","childImageSharp","original","getImageLoadBehavior","i","CollectionPost","fields","excerpt","key","slug","style","backgroundColor","Link","to","G","alt","heroAlt","image","gatsbyImageData","loading","location","date","headerData","keywords","metaImage","map","post","data","allMarkdownRemark","nodes"],"mappings":"kLAeMA,EAAKC,SAAgB,CACvBC,WCboB,2BDcpBC,YCfqB,4BDgBrBC,UCjBmB,4BDoBjBC,EAAmB,SAACC,GAAD,OACrBN,EAAG,CACCE,WAAYI,IAAgBC,KAC5BJ,YAAaG,IAAgBE,KAC7BJ,UAAWE,IAAgBG,QAG7BC,EAAS,SAAC,GAAD,IAAGJ,EAAH,EAAGA,YAAaK,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,YAArC,OACX,0BAAQC,UCxBQ,wBDyBZ,uBAAKA,UCxBM,uBDyBP,uBAAKA,UAAWT,EAAiBC,KACjC,2BACI,0BAAKK,GACL,0BAAKC,OAGVC,GAAe,uBAAKC,UCjCN,6BDiCoCD,KAI7DH,EAAOK,aAAe,CAClBF,YAAY,IAWhB,S,yJE/CWG,EAAa,2BCoBlBC,EAAuB,SAACC,GAC1B,GAAKA,EAAMC,OAGX,OAAOD,EAAM,GAAGE,YAAYC,KAAKC,gBAAgBC,UAY/CC,EAAuB,SAACC,GAC1B,OAAOA,EAAI,EAAI,QAAU,QAGvBC,EAAiB,SAAC,EAAkCD,GAAO,IAAvCL,EAAsC,EAAtCA,YAAaO,EAAyB,EAAzBA,OAAyB,EAAjBC,QAC3C,OACI,2BACIC,IAAKF,EAAOG,KACZC,MAAO,CAAEC,gBAAiBZ,EAAYY,kBAEtC,gBAAC,EAAAC,KAAD,CAAMC,GAAIP,EAAOG,KAAMhB,UD/CjB,sBCgDF,uBAAKA,UDjDI,6BCkDL,gBAAC,EAAAqB,EAAD,CACIC,IAAKhB,EAAYiB,QACjBvB,UDtDN,qBCuDMwB,MAAOlB,EAAYC,KAAKC,gBAAgBiB,gBACxCC,QAAShB,EAAqBC,MAGtC,0BAAQX,UD1DJ,wBC2DA,yBAAOA,UAAWE,GAAaI,EAAYqB,UAC3C,sBAAI3B,UDxDD,2BCwDwBM,EAAYT,OACvC,yBAAOG,UAAWE,GAAaI,EAAYsB,UAO/DhB,EAAeX,aAAe,CAC1Ba,QAAQ,IAuBZ,IAuCA,EAvCmB,SAAC,GAA2B,IAAzBe,EAAwB,EAAxBA,WAAYzB,EAAY,EAAZA,MAC9B,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CACIP,MAAUgC,EAAW/B,aAAhB,IAAgC+B,EAAWhC,MAChDE,YAAa8B,EAAW9B,YACxB+B,SAAU,CAACD,EAAW/B,aAAc+B,EAAWhC,OAC/CkC,UAAW5B,EAAqBC,KAEpC,gBAAC,IAAWyB,GACXzB,EAAM4B,KAAI,SAACC,EAAMtB,GAAP,OAAaC,EAAeqB,EAAMtB,QCzEzD,EAzBoB,SAAC,GAAc,IACzBP,EADwB,EAAX8B,KACAC,kBAAkBC,MAErC,OACI,gBAAC,EAAD,CACIP,WAAY,CACRrC,YAAaG,KACbE,MAAO,cACPC,aAAc,cACdC,YACI,oFAERK,MAAOA","file":"component---src-pages-photography-collections-js-3f0c2b3e04c22251a99a.js","sourcesContent":["import classNames from \"classnames/bind\"\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED } from \"../../utils/defs\"\n\nimport {\n    borderBlue,\n    borderGreen,\n    borderRed,\n    description as descriptionStyle,\n    header as headerStyle,\n    title as titleStyle,\n} from \"./style.scss\"\n\nconst cx = classNames.bind({\n    borderBlue,\n    borderGreen,\n    borderRed,\n})\n\nconst getBorderClasses = (accentColor) =>\n    cx({\n        borderBlue: accentColor === ACCENT_BLUE,\n        borderGreen: accentColor === ACCENT_GREEN,\n        borderRed: accentColor === ACCENT_RED,\n    })\n\nconst Header = ({ accentColor, title, sectionTitle, description }) => (\n    <header className={headerStyle}>\n        <div className={titleStyle}>\n            <div className={getBorderClasses(accentColor)}></div>\n            <div>\n                <h3>{title}</h3>\n                <h1>{sectionTitle}</h1>\n            </div>\n        </div>\n        {!!description && <div className={descriptionStyle}>{description}</div>}\n    </header>\n)\n\nHeader.defaultProps = {\n    description: ``,\n}\n\nHeader.propTypes = {\n    accentColor: PropTypes.oneOf([ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED])\n        .isRequired,\n    title: PropTypes.string.isRequired,\n    sectionTitle: PropTypes.string.isRequired,\n    description: PropTypes.string,\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport var borderRed = \"style--borderRed--Ky7vy\";\nexport var borderGreen = \"style--borderGreen--aGofA\";\nexport var borderBlue = \"style--borderBlue--2KvrE\";\nexport var description = \"style--description--Q-x-7\";\nexport var header = \"style--header--3LH-S\";\nexport var title = \"style--title--3pXfs\";","// extracted by mini-css-extract-plugin\nexport var screen_mobile_small = \"400\";\nexport var hero = \"style--hero--30EIH\";\nexport var header = \"style--header--1Fapq\";\nexport var heroWrapper = \"style--heroWrapper--x7pwN\";\nexport var post = \"style--post--3IWb9\";\nexport var postDetail = \"style--postDetail--3jmM2\";\nexport var postTitle = \"style--postTitle--1E4Ao\";","import { Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Seo from \"../seo\"\nimport Container from \"../container/container\"\nimport Header from \"../header/header\"\n\nimport {\n    header,\n    hero,\n    heroWrapper,\n    post,\n    postDetail,\n    postTitle,\n} from \"./style.scss\"\n\n/**\n * Get's the first post's image data to be used for the metadata image tags\n * when sharing on social media\n *\n * @param {List[object]} posts - list of objects that contain info about\n * each posts' image src, height, and width. Used for metadata images\n * @returns object containing src, height, and width attributes\n */\nconst getMetaImageFromPost = (posts) => {\n    if (!posts.length) {\n        return undefined\n    }\n    return posts[0].frontmatter.hero.childImageSharp.original\n}\n\n/**\n * Gets the loading behavior of the given image. Earlier images should be loaded\n * ASAP for a better user experience (reduce Largest Contentful Paint).\n * Both mobile and desktop will see at most 2 posts in the initial viewport, so\n * eager load them.\n * @param {int} i - index of the photo in the gallery. Used to determine whether\n * to eager load the image or not.\n * @returns string \"eager\" or \"lazy\" denoting to eager or lazy loading the image\n */\nconst getImageLoadBehavior = (i) => {\n    return i < 2 ? \"eager\" : \"lazy\"\n}\n\nconst CollectionPost = ({ frontmatter, fields, excerpt }, i) => {\n    return (\n        <article\n            key={fields.slug}\n            style={{ backgroundColor: frontmatter.backgroundColor }}\n        >\n            <Link to={fields.slug} className={post}>\n                <div className={heroWrapper}>\n                    <GatsbyImage\n                        alt={frontmatter.heroAlt}\n                        className={hero}\n                        image={frontmatter.hero.childImageSharp.gatsbyImageData}\n                        loading={getImageLoadBehavior(i)}\n                    />\n                </div>\n                <header className={header}>\n                    <small className={postDetail}>{frontmatter.location}</small>\n                    <h2 className={postTitle}>{frontmatter.title}</h2>\n                    <small className={postDetail}>{frontmatter.date}</small>\n                </header>\n            </Link>\n        </article>\n    )\n}\n\nCollectionPost.defaultProps = {\n    excerpt: ``,\n}\n\nCollectionPost.propTypes = {\n    frontmatter: PropTypes.shape({\n        date: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n        location: PropTypes.string.isRequired,\n        backgroundColor: PropTypes.string.isRequired,\n        hero: PropTypes.shape({\n            childImageSharp: PropTypes.shape({\n                gatsbyImageData: PropTypes.object.isRequired,\n            }).isRequired,\n        }).isRequired,\n        heroAlt: PropTypes.string.isRequired,\n    }).isRequired,\n    fields: PropTypes.shape({\n        slug: PropTypes.string.isRequired,\n    }).isRequired,\n    excerpt: PropTypes.string,\n}\n\nconst Collection = ({ headerData, posts }) => {\n    return (\n        <Container>\n            <Seo\n                title={`${headerData.sectionTitle} ${headerData.title}`}\n                description={headerData.description}\n                keywords={[headerData.sectionTitle, headerData.title]}\n                metaImage={getMetaImageFromPost(posts)}\n            />\n            <Header {...headerData} />\n            {posts.map((post, i) => CollectionPost(post, i))}\n        </Container>\n    )\n}\n\nCollection.propTypes = {\n    headerData: PropTypes.shape({\n        description: PropTypes.string,\n        sectionTitle: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    }).isRequired,\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                hero: PropTypes.shape({\n                    childImageSharp: PropTypes.shape({\n                        gatsbyImageData: PropTypes.object.isRequired,\n                        original: PropTypes.shape({\n                            src: PropTypes.string,\n                            height: PropTypes.number,\n                            width: PropTypes.number,\n                        }).isRequired,\n                    }).isRequired,\n                }).isRequired,\n            }),\n        })\n    ).isRequired,\n}\n\nexport default Collection\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_RED } from \"../../utils/defs\"\nimport Collection from \"../../components/collection/collection\"\n\nconst Collections = ({ data }) => {\n    const posts = data.allMarkdownRemark.nodes\n\n    return (\n        <Collection\n            headerData={{\n                accentColor: ACCENT_RED,\n                title: \"Collections\",\n                sectionTitle: \"Photography\",\n                description:\n                    \"Moments from my life and past trips. Photographs taken on both digital and film.\",\n            }}\n            posts={posts}\n        />\n    )\n}\n\nCollections.propTypes = {\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            nodes: PropTypes.arrayOf(PropTypes.object),\n        }),\n    }).isRequired,\n}\n\nexport default Collections\n\nexport const pageQuery = graphql`\n    query {\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            nodes {\n                excerpt\n                fields {\n                    slug\n                }\n                frontmatter {\n                    date(formatString: \"YYYY\")\n                    title\n                    description\n                    location\n                    backgroundColor\n                    hero {\n                        childImageSharp {\n                            ...ImageFragment\n                            ...MetaImageFragment\n                        }\n                    }\n                    heroAlt\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}