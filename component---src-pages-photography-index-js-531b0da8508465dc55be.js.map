{"version":3,"sources":["webpack://lingene/./src/components/header/header.js","webpack://lingene/./src/components/header/style.scss","webpack://lingene/./src/components/portfolio/style.scss","webpack://lingene/./src/components/portfolio/portfolio.js","webpack://lingene/./src/pages/photography/index.js"],"names":["cx","classNames","borderBlue","borderGreen","borderRed","getBorderClasses","accentColor","ACCENT_BLUE","ACCENT_GREEN","ACCENT_RED","Header","title","sectionTitle","description","className","defaultProps","filters","filterStyle","filterActive","Filters","filterValues","activeFilter","onFilterUpdate","map","filter","key","onClick","onMouseDown","e","preventDefault","images","firstHorizontalImage","headerData","fluidImages","allFilters","concat","useState","updateActiveFilter","displayedImages","setDisplayedImages","useEffect","image","type","keywords","metaImage","find","childImageSharp","original","height","width","length","data","allFile","nodes","childrenYaml"],"mappings":"iLAeMA,EAAKC,SAAgB,CACvBC,WCboB,2BDcpBC,YCfqB,4BDgBrBC,UCjBmB,4BDoBjBC,EAAmB,SAACC,GAAD,OACrBN,EAAG,CACCE,WAAYI,IAAgBC,KAC5BJ,YAAaG,IAAgBE,KAC7BJ,UAAWE,IAAgBG,QAG7BC,EAAS,SAAC,GAAD,IAAGJ,EAAH,EAAGA,YAAaK,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,YAArC,OACX,0BAAQC,UCxBQ,wBDyBZ,uBAAKA,UCxBM,uBDyBP,uBAAKA,UAAWT,EAAiBC,KACjC,2BACI,0BAAKK,GACL,0BAAKC,OAGVC,GAAe,uBAAKC,UCjCN,6BDiCoCD,KAI7DH,EAAOK,aAAe,CAClBF,YAAY,IAWhB,S,2IElDWG,EAAU,wBCQfhB,EAAKC,SAAgB,CACvBgB,YDXgB,uBCYhBC,aDXsB,6BCYtBF,YAoBEG,EAAU,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eAC3C,OACI,uBAAKR,UAAWE,GACXI,EAAaG,KAAI,SAACC,GAAD,OACd,0BACIC,IAAKD,EACLV,UAAWd,EAAG,CACViB,aAAa,EACbC,aAAcM,IAAWH,IAE7BK,QAAS,kBAAMJ,EAAeE,IAC9BG,YAAa,SAACC,GAAD,OAAOA,EAAEC,mBAErBL,QA+ErB,EAlEkB,SAAC,GAA4D,IAlCzDM,EACZC,EAiCWlB,EAAyD,EAAzDA,YAAamB,EAA4C,EAA5CA,WAA4C,IAAhChB,eAAgC,MAAtB,GAAsB,EAAlBiB,EAAkB,EAAlBA,YAClDC,EAAa,CAAC,OAAOC,OAAOnB,GAClC,GAA2CoB,cAASF,EAAW,IAAxDb,EAAP,KAAqBgB,EAArB,KACA,GAA8CD,cAASH,GAAhDK,EAAP,KAAwBC,EAAxB,KAiBA,OAVAC,gBAAU,WAEFD,EADiB,QAAjBlB,EACmBY,EAGfA,EAAYT,QAAO,SAACiB,GAAD,OAAWA,EAAMC,OAASrB,QAGtD,CAACA,EAAcY,IAGd,gBAAC,IAAD,KACI,gBAAC,IAAD,CACItB,MAAUqB,EAAWpB,aAAhB,IAAgCoB,EAAWrB,MAChDE,YAAamB,EAAWnB,aAAeA,EACvC8B,SAAU,CAACX,EAAWpB,aAAcoB,EAAWrB,OAC/CiC,WA5DMd,EA4DkBG,EA3D9BF,EAAuBD,EAAOe,MAAK,YAAgB,IACrD,EADoD,EAAZJ,MACRK,gBAAgBC,SAAxCC,EAAR,EAAQA,OACR,OADA,EAAgBC,MACDD,KAEZjB,GAAwBA,EAAqBU,MAAMK,gBAAgBC,YAyDlE,gBAAC,IAAWf,GACXhB,EAAQkC,OAAS,GACd,gBAAC/B,EAAD,CACIC,aAAcc,EACdb,aAAcA,EACdC,eAAgBe,IAGxB,gBAAC,IAAD,CAASJ,YAAaK,O,0EC9DlC,UA3BoB,SAAC,GAAc,IAAZa,EAAW,EAAXA,KACnB,OACI,gBAAC,IAAD,CACItC,YAAY,mCACZmB,WAAY,CACR1B,YAAaC,KACbI,MAAO,UACPC,aAAc,eAElBI,QAAS,CAAC,cAAe,WAAY,aACrCiB,YAAakB,EAAKC,QAAQC,MAAM,GAAGC","file":"component---src-pages-photography-index-js-531b0da8508465dc55be.js","sourcesContent":["import classNames from \"classnames/bind\"\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED } from \"../../utils/defs\"\n\nimport {\n    borderBlue,\n    borderGreen,\n    borderRed,\n    description as descriptionStyle,\n    header as headerStyle,\n    title as titleStyle,\n} from \"./style.scss\"\n\nconst cx = classNames.bind({\n    borderBlue,\n    borderGreen,\n    borderRed,\n})\n\nconst getBorderClasses = (accentColor) =>\n    cx({\n        borderBlue: accentColor === ACCENT_BLUE,\n        borderGreen: accentColor === ACCENT_GREEN,\n        borderRed: accentColor === ACCENT_RED,\n    })\n\nconst Header = ({ accentColor, title, sectionTitle, description }) => (\n    <header className={headerStyle}>\n        <div className={titleStyle}>\n            <div className={getBorderClasses(accentColor)}></div>\n            <div>\n                <h3>{title}</h3>\n                <h1>{sectionTitle}</h1>\n            </div>\n        </div>\n        {!!description && <div className={descriptionStyle}>{description}</div>}\n    </header>\n)\n\nHeader.defaultProps = {\n    description: ``,\n}\n\nHeader.propTypes = {\n    accentColor: PropTypes.oneOf([ACCENT_BLUE, ACCENT_GREEN, ACCENT_RED])\n        .isRequired,\n    title: PropTypes.string.isRequired,\n    sectionTitle: PropTypes.string.isRequired,\n    description: PropTypes.string,\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport var borderRed = \"style--borderRed--Ky7vy\";\nexport var borderGreen = \"style--borderGreen--aGofA\";\nexport var borderBlue = \"style--borderBlue--2KvrE\";\nexport var description = \"style--description--Q-x-7\";\nexport var header = \"style--header--3LH-S\";\nexport var title = \"style--title--3pXfs\";","// extracted by mini-css-extract-plugin\nexport var filter = \"style--filter--17_Ie\";\nexport var filterActive = \"style--filterActive--3OvIA\";\nexport var filters = \"style--filters--2q2v1\";","import classNames from \"classnames/bind\"\nimport React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Container from \"../container/container\"\nimport Gallery from \"../gallery/gallery\"\nimport Header from \"../header/header\"\nimport Seo from \"../seo\"\n\nimport { filter as filterStyle, filterActive, filters } from \"./style.scss\"\n\nconst cx = classNames.bind({\n    filterStyle,\n    filterActive,\n    filters,\n})\n\n/**\n * Get's the first image's image data in the list of images that is a horizontal image.\n * This image will be used for the metadata image tags when sharing on social media,\n * which generally displays in a horizontal format.\n * \n * @param {List[object]} images - list of objects that contain info about\n * each images' image src, height, and width. Used for metadata images\n * @returns object containing src, height, and width attributes\n */\nconst getMetaImage = (images) => {\n    const firstHorizontalImage = images.find(({ image }) => {\n        const { height, width } = image.childImageSharp.original\n        return width > height\n    })\n    return firstHorizontalImage && firstHorizontalImage.image.childImageSharp.original\n}\n\nconst Filters = ({ filterValues, activeFilter, onFilterUpdate }) => {\n    return (\n        <div className={filters}>\n            {filterValues.map((filter) => (\n                <button\n                    key={filter}\n                    className={cx({\n                        filterStyle: true,\n                        filterActive: filter === activeFilter,\n                    })}\n                    onClick={() => onFilterUpdate(filter)}\n                    onMouseDown={(e) => e.preventDefault()}\n                >\n                    {filter}\n                </button>\n            ))}\n        </div>\n    )\n}\n\nFilters.propTypes = {\n    filterValues: PropTypes.arrayOf(PropTypes.string).isRequired,\n    activeFilter: PropTypes.string.isRequired,\n    onFilterUpdate: PropTypes.func.isRequired,\n}\n\nconst Portfolio = ({ description, headerData, filters = [], fluidImages }) => {\n    const allFilters = [\"all\"].concat(filters)\n    const [activeFilter, updateActiveFilter] = useState(allFilters[0])\n    const [displayedImages, setDisplayedImages] = useState(fluidImages)\n\n    /**\n     * Based on the activeFilter, filter the images that are displayed\n     * determined by the image's type attribute. Updates the displayedImages,\n     * which is passed into the Gallery component\n     */\n    useEffect(() => {\n        if (activeFilter === \"all\") {\n            setDisplayedImages(fluidImages)\n        } else {\n            setDisplayedImages(\n                fluidImages.filter((image) => image.type === activeFilter)\n            )\n        }\n    }, [activeFilter, fluidImages])\n\n    return (\n        <Container>\n            <Seo\n                title={`${headerData.sectionTitle} ${headerData.title}`}\n                description={headerData.description || description}\n                keywords={[headerData.sectionTitle, headerData.title]}\n                metaImage={getMetaImage(fluidImages)}\n            />\n            <Header {...headerData} />\n            {filters.length > 0 && (\n                <Filters\n                    filterValues={allFilters}\n                    activeFilter={activeFilter}\n                    onFilterUpdate={updateActiveFilter}\n                />\n            )}\n            <Gallery fluidImages={displayedImages} />\n        </Container>\n    )\n}\n\nPortfolio.propTypes = {\n    description: PropTypes.string,\n    headerData: PropTypes.shape({\n        description: PropTypes.string,\n        sectionTitle: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    }).isRequired,\n    filters: PropTypes.arrayOf(PropTypes.string),\n    fluidImages: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            image: PropTypes.shape({\n                childImageSharp: PropTypes.shape({\n                    gatsbyImageData: PropTypes.object.isRequired,\n                    original: PropTypes.shape({\n                        src: PropTypes.string,\n                        height: PropTypes.number,\n                        width: PropTypes.number,\n                    }).isRequired,\n                }).isRequired,\n            }).isRequired,\n        })\n    ).isRequired,\n}\n\nexport default Portfolio\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport { ACCENT_BLUE } from \"../../utils/defs\"\nimport Portfolio from \"../../components/portfolio/portfolio\"\n\nconst Photography = ({ data }) => {\n    return (\n        <Portfolio\n            description=\"Lingene's photography portfolio.\"\n            headerData={{\n                accentColor: ACCENT_BLUE,\n                title: \"Gallery\",\n                sectionTitle: \"Photography\",\n            }}\n            filters={[\"environment\", \"portrait\", \"landscape\"]}\n            fluidImages={data.allFile.nodes[0].childrenYaml}\n        />\n    )\n}\n\nPhotography.propTypes = {\n    data: PropTypes.shape({\n        allFile: PropTypes.shape({\n            nodes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    childrenYaml: PropTypes.array,\n                })\n            ),\n        }),\n    }).isRequired,\n}\n\nexport default Photography\n\nexport const pageQuery = graphql`\n    query {\n        allFile(\n            filter: {\n                sourceInstanceName: { eq: \"galleries\" }\n                name: { eq: \"photography\" }\n            }\n        ) {\n            nodes {\n                childrenYaml {\n                    ...GalleryImageFragment\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}