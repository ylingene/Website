{"version":3,"sources":["webpack:///./src/templates/style.scss","webpack:///./src/templates/blog-post.js"],"names":["module","exports","BlogPostTemplate","data","pageContext","post","markdownRemark","images","frontmatter","photos","childrenYaml","previous","next","title","description","excerpt","className","style","header","location","date","contentSection","content","dangerouslySetInnerHTML","__html","html","to","COLLECTIONS_PATH","fluidImages","blogNavigation","fields","slug","rel","pageQuery"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,eAAiB,+BAA+B,QAAU,wBAAwB,eAAiB,+BAA+B,OAAS,yB,kCCD7J,2JA+EeC,UApEU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC1BC,EAAOF,EAAKG,eACZC,EAASF,EAAKG,YAAYC,OAASJ,EAAKG,YAAYC,OAAOC,aAAe,GACxEC,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KAElB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAOR,EAAKG,YAAYK,MACxBC,YAAaT,EAAKG,YAAYM,aAAeT,EAAKU,UAEpD,4BAAQC,UAAWC,IAAMC,QACvB,4BAAKb,EAAKG,YAAYW,UACtB,4BAAKd,EAAKG,YAAYK,OACtB,+BAAQR,EAAKG,YAAYY,OAE3B,yBAAKJ,UAAWC,IAAMI,gBACpB,iCACE,6BACEL,UAAWC,IAAMK,QACjBC,wBAAyB,CAAEC,OAAQnB,EAAKoB,SAG5C,kBAAC,OAAD,CAAMC,GAAIC,KAAV,wBAEF,kBAAC,IAAD,CAASC,YAAarB,IACtB,6BACE,wBAAIS,UAAWC,IAAMY,gBACnB,4BACGlB,GACC,kBAAC,OAAD,CAAMe,GAAIf,EAASmB,OAAOC,KAAMC,IAAI,QAApC,KACKrB,EAASH,YAAYK,QAI9B,4BACGD,GACC,kBAAC,OAAD,CAAMc,GAAId,EAAKkB,OAAOC,KAAMC,IAAI,QAC7BpB,EAAKJ,YAAYK,MADpB,WAiCP,IAAMoB,EAAS","file":"component---src-templates-blog-post-js-ba5eeec257a02f676666.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blogNavigation\":\"style--blogNavigation--2_1I2\",\"content\":\"style--content--1CU64\",\"contentSection\":\"style--contentSection--RwqwW\",\"header\":\"style--header--2AlvK\"};","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport Container from \"../components/container/container\"\nimport Gallery from \"../components/gallery/gallery\"\nimport SEO from \"../components/seo\"\nimport { COLLECTIONS_PATH } from \"../utils/defs\"\n\nimport style from \"./style.scss\"\n\nconst BlogPostTemplate = ({ data, pageContext }) => {\n  const post = data.markdownRemark\n  const images = post.frontmatter.photos ? post.frontmatter.photos.childrenYaml : []\n  const { previous, next } = pageContext\n\n  return (\n    <Container>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <header className={style.header}>\n        <h3>{post.frontmatter.location}</h3>\n        <h1>{post.frontmatter.title}</h1>\n        <small>{post.frontmatter.date}</small>\n      </header>\n      <div className={style.contentSection}>\n        <article>\n          <section\n            className={style.content}\n            dangerouslySetInnerHTML={{ __html: post.html }}\n          />\n        </article>\n        <Link to={COLLECTIONS_PATH}>back to collections</Link>\n      </div>\n      <Gallery fluidImages={images} />\n      <nav>\n        <ul className={style.blogNavigation}>\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Container>\n  )\n}\n\nBlogPostTemplate.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      id: PropTypes.string,\n      excerpt: PropTypes.string,\n      html: PropTypes.string,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        date: PropTypes.string,\n        description: PropTypes.string,\n        location: PropTypes.string,\n        photos: PropTypes.shape({\n          childrenYaml: PropTypes.array,\n        }),\n      }),\n    }),\n  }).isRequired,\n  pageContext: PropTypes.object.isRequired,\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n         query BlogPostBySlug($slug: String!) {\n           markdownRemark(fields: { slug: { eq: $slug } }) {\n             id\n             excerpt(pruneLength: 160)\n             html\n             frontmatter {\n               title\n               date(formatString: \"MMMM YYYY\")\n               description\n               location\n               photos {\n                 childrenYaml {\n                   ...GalleryImageFragment\n                 }\n               }\n             }\n           }\n         }\n       `\n"],"sourceRoot":""}