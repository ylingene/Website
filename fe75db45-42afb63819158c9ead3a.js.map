{"version":3,"file":"fe75db45-42afb63819158c9ead3a.js","mappings":"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","sources":["webpack://lingene/./node_modules/photoswipe/dist/photoswipe.esm.js"],"sourcesContent":["/*!\n  * PhotoSwipe 5.4.3 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n\n  if (className) {\n    el.className = className;\n  }\n\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n\n  return el;\n}\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n\n  return p1;\n}\n/**\r\n * @param {Point} p\r\n */\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\n\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\n\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\n\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n\n  if (scale !== undefined) {\n    propValue += ` scale3d(${scale},${scale},1)`;\n  }\n\n  return propValue;\n}\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\n\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\n\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop ? `${prop} ${duration}ms ${ease || defaultCSSEasing}` : 'none';\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? `${w}px` : w;\n  el.style.height = typeof h === 'number' ? `${h}px` : h;\n}\n/**\r\n * @param {HTMLElement} el\r\n */\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode().catch(() => {});\n  }\n\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n\n    img.onerror = reject;\n  });\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n// Detect passive event listener support\nlet supportsPassive = false;\n/* eslint-disable */\n\ntry {\n  /* @ts-ignore */\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\n\n\nclass DOMEvents {\n  constructor() {\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\n    this._pool = [];\n  }\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n  /**\r\n   * Removes all bound events\r\n   */\n\n\n  removeAll() {\n    this._pool.forEach(poolItem => {\n      this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);\n    });\n\n    this._pool = [];\n  }\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\n\n\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\n    const types = type.split(' ');\n    types.forEach(eType => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter(poolItem => {\n              return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        } // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n\n\n        const eventOptions = supportsPassive ? {\n          passive: passive || false\n        } : false;\n        target[methodName](eType, listener, eventOptions);\n      }\n    });\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {Record<Axis, number>} Point */\n\n/** @typedef {'x' | 'y'} Axis */\n\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\n\nclass PanBounds {\n  /**\r\n   * @param {Slide} slide\r\n   */\n  constructor(slide) {\n    this.slide = slide;\n    this.currZoomLevel = 1;\n    this.center =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.max =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.min =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n\n      this._updateAxis('y');\n\n      this.slide.pswp.dispatch('calcBounds', {\n        slide: this.slide\n      });\n    }\n  }\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\n\n\n  _updateAxis(axis) {\n    const {\n      pswp\n    } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);\n    const panAreaSize = this.slide.panAreaSize[axis]; // Default position of element.\n    // By default, it is center of viewport:\n\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding; // maximum pan position\n\n    this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis]; // minimum pan position\n\n    this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];\n  } // _getZeroBounds\n\n\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\n\n\n  correctPan(axis, panOffset) {\n    // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName =\n    /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n/**\r\n * Renders and allows to control a single slide\r\n */\n\nclass Slide {\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = index === pswp.currIndex;\n    this.currentResolution = 0;\n    /** @type {Point} */\n\n    this.panAreaSize = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n    this.isFirstSlide = this.isActive && !pswp.opener.isOpen;\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\n    this.container = createElement('pswp__zoom-wrap', 'div');\n    /** @type {HTMLElement | null} */\n\n    this.holderElement = null;\n    this.currZoomLevel = 1;\n    /** @type {number} */\n\n    this.width = this.content.width;\n    /** @type {number} */\n\n    this.height = this.content.height;\n    this.heavyAppended = false;\n    this.bounds = new PanBounds(this);\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n    this.pswp.dispatch('slideInit', {\n      slide: this\n    });\n  }\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\n\n\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\n\n\n  append(holderElement) {\n    this.holderElement = holderElement;\n    this.container.style.transformOrigin = '0 0'; // Slide appended to DOM\n\n    if (!this.data) {\n      return;\n    }\n\n    this.calculateSize();\n    this.load();\n    this.updateContentSize();\n    this.appendHeavy();\n    this.holderElement.appendChild(this.container);\n    this.zoomAndPanToInitial();\n    this.pswp.dispatch('firstZoomPan', {\n      slide: this\n    });\n    this.applyCurrentZoomPan();\n    this.pswp.dispatch('afterSetContent', {\n      slide: this\n    });\n\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n\n  load() {\n    this.content.load(false);\n    this.pswp.dispatch('slideLoad', {\n      slide: this\n    });\n  }\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\n\n\n  appendHeavy() {\n    const {\n      pswp\n    } = this;\n    const appendHeavyNearby = true; // todo\n    // Avoid appending heavy elements during animations\n\n    if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) {\n      return;\n    }\n\n    if (this.pswp.dispatch('appendHeavy', {\n      slide: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.heavyAppended = true;\n    this.content.append();\n    this.pswp.dispatch('appendHeavyContent', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\n\n\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\n\n\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\n      // allow filtering\n      this.calculateSize();\n    } // reset zoom level\n\n\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n    this.pswp.dispatch('slideDeactivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\n\n\n  destroy() {\n    this.content.hasSlide = false;\n    this.content.remove();\n    this.container.remove();\n    this.pswp.dispatch('slideDestroy', {\n      slide: this\n    });\n  }\n\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\n\n\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n\n    if (!scaleMultiplier) {\n      return;\n    }\n\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n\n    this.content.setDisplayedSize(width, height);\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n\n    return false;\n  }\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\n\n\n  getPlaceholderElement() {\n    var _this$content$placeho;\n\n    return (_this$content$placeho = this.content.placeholder) === null || _this$content$placeho === void 0 ? void 0 : _this$content$placeho.element;\n  }\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\n\n\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const {\n      pswp\n    } = this;\n\n    if (!this.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel,\n      centerPoint,\n      transitionDuration\n    }); // stop all pan and zoom transitions\n\n    pswp.animations.stopAllPan(); // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    } // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n\n      this.applyCurrentZoomPan();\n    };\n\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\n\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);\n  }\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\n\n\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n\n    if (!prevZoomLevel) {\n      prevZoomLevel = this.zoomLevels.initial;\n    }\n\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);\n  }\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\n\n\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\n\n\n  isPannable() {\n    return Boolean(this.width) && this.currZoomLevel > this.zoomLevels.fit;\n  }\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\n\n\n  isZoomable() {\n    return Boolean(this.width) && this.content.isZoomable();\n  }\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\n\n\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', {\n        slide: this\n      });\n    }\n  }\n\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial; // pan according to the zoom level\n\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', {\n      slide: this\n    });\n  }\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\n\n\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n\n  calculateSize() {\n    const {\n      pswp\n    } = this;\n    equalizePoints(this.panAreaSize, getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index));\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n  /** @returns {string} */\n\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\n\n\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n    this.pswp.dispatch('resolutionChanged');\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6; // 1 corresponds to the third of viewport height\n\nconst MIN_RATIO_TO_CLOSE = 0.4; // Minimum speed required to navigate\n// to next or previous slide\n\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n/**\r\n * Handles single pointer dragging\r\n */\n\n\nclass DragHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    /** @type {Point} */\n\n    this.startPan = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  start() {\n    if (this.pswp.currSlide) {\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    }\n\n    this.pswp.animations.stopAll();\n  }\n\n  change() {\n    const {\n      p1,\n      prevP1,\n      dragAxis\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (dragAxis === 'y' && this.pswp.options.closeOnVerticalDrag && currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n\n      if (!this.pswp.dispatch('verticalDrag', {\n        panY\n      }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        this.pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n\n        if (currSlide) {\n          roundPoint(currSlide.pan);\n          currSlide.applyCurrentZoomPan();\n        }\n      }\n    }\n  }\n\n  end() {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      mainScroll,\n      currSlide\n    } = this.pswp;\n    let indexDiff = 0;\n    this.pswp.animations.stopAll(); // Handle main scroll if it's shifted\n\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX(); // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is visible\n      // 1 - slide is fully visible\n\n      const currentSlideVisibilityRatio = mainScrollShiftDiff / this.pswp.viewportSize.x; // Go next slide.\n      //\n      // - if velocity and its direction is matched,\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n\n      if (velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if (velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    } // Restore zoom level\n\n\n    if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n\n      this._finishPanGestureForAxis('y');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\n\n\n  _finishPanGestureForAxis(axis) {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = this.pswp.bgOpacity < 1 && axis === 'y'; // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Increasing this number will reduce travel distance\n\n    const decelerationRate = 0.995; // 0.99\n    // Pan position if there is no bounds\n\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition); // If we are above and moving upwards,\n      // or if we are below and moving downwards\n\n\n      if (vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE) {\n        this.pswp.close();\n        return;\n      }\n    } // Pan position with corrected bounds\n\n\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition); // Exit if pan position should not be changed\n    // or if speed it too low\n\n    if (panPos === correctedPanPosition) {\n      return;\n    } // Overshoot if the final position is out of pan bounds\n\n\n    const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;\n    const initialBgOpacity = this.pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n    this.pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: pos => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist; // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n\n          this.pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));\n        }\n\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\n\n\n  _panOrMoveMainScroll(axis) {\n    const {\n      p1,\n      dragAxis,\n      prevP1,\n      isMultitouch\n    } = this.gestures;\n    const {\n      currSlide,\n      mainScroll\n    } = this.pswp;\n    const delta = p1[axis] - prevP1[axis];\n    const newMainScrollX = mainScroll.x + delta;\n\n    if (!delta || !currSlide) {\n      return false;\n    } // Always move main scroll if image can not be panned\n\n\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n\n    const {\n      bounds\n    } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n\n    if (this.pswp.options.allowPanToNext && dragAxis === 'x' && axis === 'x' && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX(); // Position of the main scroll relative to the viewport\n\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];\n\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];\n\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0\n          /*&& isRightToLeft*/\n          ) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0\n          /*&& isLeftToRight*/\n          ) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n\n    return false;\n  } // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\n\n\n  _getVerticalDragRatio(panY) {\n    var _this$pswp$currSlide$, _this$pswp$currSlide;\n\n    return (panY - ((_this$pswp$currSlide$ = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.bounds.center.y) !== null && _this$pswp$currSlide$ !== void 0 ? _this$pswp$currSlide$ : 0)) / (this.pswp.viewportSize.y / 3);\n  }\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\n\n\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan); // If we are out of pan bounds\n\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\n\nclass ZoomHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startPan = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startZoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._zoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._wasOverFitZoomLevel = false;\n    /** @private */\n\n    this._startZoomLevel = 1;\n  }\n\n  start() {\n    const {\n      currSlide\n    } = this.gestures.pswp;\n\n    if (currSlide) {\n      this._startZoomLevel = currSlide.currZoomLevel;\n      equalizePoints(this._startPan, currSlide.pan);\n    }\n\n    this.gestures.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n\n  change() {\n    const {\n      p1,\n      startP1,\n      p2,\n      startP2,\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n\n    let currZoomLevel = 1 / getDistanceBetween(startP1, startP2) * getDistanceBetween(p1, p2) * this._startZoomLevel; // slightly over the zoom.fit\n\n\n    if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) {\n      this._wasOverFitZoomLevel = true;\n    }\n\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);\n\n        if (!pswp.dispatch('pinchClose', {\n          bgOpacity\n        }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n  }\n\n  end() {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial) && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\n\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;\n  }\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\n\n\n  correctZoomPan(ignoreGesture) {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!(currSlide !== null && currSlide !== void 0 && currSlide.isZoomable())) {\n      return;\n    }\n\n    if (this._zoomPoint.x === 0) {\n      ignoreGesture = true;\n    }\n\n    const prevZoomLevel = currSlide.currZoomLevel;\n    /** @type {number} */\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial; // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max; // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n    const initialPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, currSlide.pan);\n    let destinationPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, initialPan);\n\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    } // set zoom level, so pan bounds are updated according to it\n\n\n    currSlide.setZoomLevel(destinationZoomLevel);\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    }; // return zoom level and its bounds to initial\n\n    currSlide.setZoomLevel(prevZoomLevel);\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\n\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n\n      currSlide.applyCurrentZoomPan(); // nothing to animate\n\n      return;\n    }\n\n    pswp.animations.stopAllPan();\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: now => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n\n          currSlide.applyCurrentZoomPan();\n        } // Restore background opacity\n\n\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n\n}\n\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\n\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\nfunction didTapOnMainContent(event) {\n  return !!\n  /** @type {HTMLElement} */\n  event.target.closest('.pswp__container');\n}\n/**\r\n * Tap, double-tap handler.\r\n */\n\n\nclass TapHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  click(point, originalEvent) {\n    const targetClassList =\n    /** @type {HTMLElement} */\n    originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item') || targetClassList.contains('pswp__zoom-wrap');\n\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    var _this$gestures$pswp$e;\n\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    const actionFullName =\n    /** @type {AddPostfix<Actions, 'Action'>} */\n    actionName + 'Action';\n    const optionValue = pswp.options[actionFullName];\n\n    if (pswp.dispatch(actionFullName, {\n      point,\n      originalEvent\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n\n      case 'zoom':\n        currSlide === null || currSlide === void 0 || currSlide.toggleZoom(point);\n        break;\n\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide !== null && currSlide !== void 0 && currSlide.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n\n        break;\n\n      case 'toggle-controls':\n        (_this$gestures$pswp$e = this.gestures.pswp.element) === null || _this$gestures$pswp$e === void 0 || _this$gestures$pswp$e.classList.toggle('pswp--ui-visible'); // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n\n        break;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\n\nconst AXIS_SWIPE_HYSTERISIS = 10; //const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\n\nconst MIN_TAP_DISTANCE = 25; // px\n\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\n\nclass Gestures {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @type {'x' | 'y' | null} */\n\n    this.dragAxis = null; // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n\n    /** @type {Point} */\n\n    this.p1 = {\n      x: 0,\n      y: 0\n    }; // the first pressed pointer\n\n    /** @type {Point} */\n\n    this.p2 = {\n      x: 0,\n      y: 0\n    }; // the second pressed pointer\n\n    /** @type {Point} */\n\n    this.prevP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.prevP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._lastStartP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._intervalP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @type {Point[]}\r\n     * @private\r\n     */\n\n    this._ongoingPointers = [];\n    /** @private */\n\n    this._touchEventEnabled = 'ontouchstart' in window;\n    /** @private */\n\n    this._pointerEventEnabled = !!window.PointerEvent;\n    this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @private */\n\n    this._intervalTime = 0;\n    /** @private */\n\n    this._velocityCalculated = false;\n    this.isMultitouch = false;\n    this.isDragging = false;\n    this.isZooming = false;\n    /** @type {number | null} */\n\n    this.raf = null;\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\n\n    this._tapTimer = null;\n\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click',\n      /** @type EventListener */\n      this._onClick.bind(this));\n\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel'); // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n\n\n        if (pswp.scrollWrap) {\n          pswp.scrollWrap.ontouchmove = () => {};\n\n          pswp.scrollWrap.ontouchend = () => {};\n        }\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\n\n\n  _bindEvents(pref, down, up, cancel) {\n    const {\n      pswp\n    } = this;\n    const {\n      events\n    } = pswp;\n    const cancelEvent = cancel ? pref + cancel : '';\n    events.add(pswp.scrollWrap, pref + down,\n    /** @type EventListener */\n    this.onPointerDown.bind(this));\n    events.add(window, pref + 'move',\n    /** @type EventListener */\n    this.onPointerMove.bind(this));\n    events.add(window, pref + up,\n    /** @type EventListener */\n    this.onPointerUp.bind(this));\n\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent,\n      /** @type EventListener */\n      this.onPointerUp.bind(this));\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse'; // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n\n    const {\n      pswp\n    } = this; // if PhotoSwipe is opening or closing\n\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n\n    if (pswp.dispatch('pointerDown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (isMousePointer) {\n      pswp.mouseDetected(); // preventDefault mouse event to prevent\n      // browser image drag feature\n\n      this._preventPointerEventBehaviour(e, 'down');\n    }\n\n    pswp.animations.stopAll();\n\n    this._updatePoints(e, 'down');\n\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null; // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n\n      equalizePoints(this.startP1, this.p1);\n    }\n\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerMove(e) {\n    this._preventPointerEventBehaviour(e, 'move');\n\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'move');\n\n    if (this.pswp.dispatch('pointerMove', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      } // Drag axis was detected, emit drag.start\n\n\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n\n        this.isDragging = true;\n\n        this._clearTapTimer(); // Tap can not trigger after drag\n        // Adjust starting point\n\n\n        this._updateStartPoints();\n\n        this._intervalTime = Date.now(); //this._startTime = this._intervalTime;\n\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n\n        this._rafStopLoop();\n\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n\n      this.isZooming = true; // Adjust starting points\n\n      this._updateStartPoints();\n\n      this.zoomLevels.start();\n\n      this._rafStopLoop();\n\n      this._rafRenderLoop();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false; // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'up');\n\n    if (this.pswp.dispatch('pointerUp', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 0) {\n      this._rafStopLoop();\n\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n\n        this._updateStartPoints();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else\n        /* if (this.isZooming) */\n        {\n          if (!pointsEqual(this.p1, this.prevP1) || !pointsEqual(this.p2, this.prevP2)) {\n            this.zoomLevels.change();\n          }\n        }\n\n      this._updatePrevPoints();\n\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\n\n\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n\n    if (duration < 50 && !force) {\n      return;\n    }\n\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _finishTap(e) {\n    const {\n      mainScroll\n    } = this.pswp; // Do not trigger tap events if main scroll is shifted\n\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    } // Do not trigger tap for touchcancel or pointercancel\n\n\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    } // Trigger click instead of tap for mouse events\n\n\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    } // Disable delay if there is no doubleTapAction\n\n\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0; // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n\n    if (this._tapTimer) {\n      this._clearTapTimer(); // Check if two taps were more or less on the same place\n\n\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\n\n\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n\n    return 0;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _preventPointerEventBehaviour(e, pointerType) {\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\n\n    if (preventPointerEvent) {\n      e.preventDefault();\n    }\n  }\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      const pointerEvent =\n      /** @type {PointerEvent} */\n      e; // Try to find the current pointer in ongoing pointers by its ID\n\n      const pointerIndex = this._ongoingPointers.findIndex(ongoingPointer => {\n        return ongoingPointer.id === pointerEvent.pointerId;\n      });\n\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {\n          x: 0,\n          y: 0\n        }));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\n      }\n\n      this._numActivePoints = this._ongoingPointers.length; // update points that PhotoSwipe uses\n      // to calculate position and scale\n\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      const touchEvent =\n      /** @type {TouchEvent} */\n      e;\n      this._numActivePoints = 0;\n\n      if (touchEvent.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\n\n          this._numActivePoints++;\n\n          if (touchEvent.touches.length > 1) {\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\n\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint(\n        /** @type {PointerEvent} */\n        e, this.p1);\n\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  }\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\n\n\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  }\n  /** update points at the start of gesture\r\n   * @private\r\n   */\n\n\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n\n    this._updatePrevPoints();\n  }\n  /** @private */\n\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\n\n\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n\n    if ('pointerId' in e) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n\n    return p;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/slide.js').default} Slide */\n\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\n\nconst MAIN_SCROLL_END_FRICTION = 0.35; // const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\n\nclass MainScroll {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n    this.slideWidth = 0;\n    /** @private */\n\n    this._currPositionIndex = 0;\n    /** @private */\n\n    this._prevPositionIndex = 0;\n    /** @private */\n\n    this._containerShiftIndex = -1;\n    /** @type {ItemHolder[]} */\n\n    this.itemHolders = [];\n  }\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\n\n\n  resize(resizeSlides) {\n    const {\n      pswp\n    } = this;\n    const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing); // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n\n    const slideWidthChanged = newSlideWidth !== this.slideWidth;\n\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);\n      }\n\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\n\n\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0; // This will force recalculation of size on next resize()\n\n    this.slideWidth = 0; // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n\n    this._containerShiftIndex = -1;\n  }\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\n\n\n  appendHolders() {\n    this.itemHolders = []; // append our three slide holders -\n    // previous, current, and next\n\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', 'div', this.pswp.container);\n      el.setAttribute('role', 'group');\n      el.setAttribute('aria-roledescription', 'slide');\n      el.setAttribute('aria-hidden', 'true'); // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n      el.style.display = i === 1 ? 'block' : 'none';\n      this.itemHolders.push({\n        el //index: -1\n\n      });\n    }\n  }\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\n\n\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\n\n\n  moveIndexBy(diff, animate, velocityX) {\n    const {\n      pswp\n    } = this;\n    let newIndex = pswp.potentialIndex + diff;\n    const numSlides = pswp.getNumItems();\n\n    if (pswp.canLoop()) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n      const distance = (diff + numSlides) % numSlides;\n\n      if (distance <= numSlides / 2) {\n        // go forward\n        diff = distance;\n      } else {\n        // go backwards\n        diff = distance - numSlides;\n      }\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= numSlides) {\n        newIndex = numSlides - 1;\n      }\n\n      diff = newIndex - pswp.potentialIndex;\n    }\n\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n    pswp.animations.stopMainScroll();\n    const destinationX = this.getCurrSlideX();\n\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1,\n        //0.7,\n        onUpdate: x => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\n\n      if (pswp.canLoop()) {\n        const currDistance = (currDiff + numSlides) % numSlides;\n\n        if (currDistance <= numSlides / 2) {\n          // go forward\n          currDiff = currDistance;\n        } else {\n          // go backwards\n          currDiff = currDistance - numSlides;\n        }\n      } // Force-append new slides during transition\n      // if difference between slides is more than 1\n\n\n      if (Math.abs(currDiff) > 1) {\n        this.updateCurrItem();\n      }\n    }\n\n    return Boolean(diff);\n  }\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\n\n\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\n\n\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n  /**\r\n   * Update slides X positions and set their content\r\n   */\n\n\n  updateCurrItem() {\n    var _this$itemHolders$;\n\n    const {\n      pswp\n    } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n\n    if (!positionDifference) {\n      return;\n    }\n\n    this._prevPositionIndex = this._currPositionIndex;\n    pswp.currIndex = pswp.potentialIndex;\n    let diffAbs = Math.abs(positionDifference);\n    /** @type {ItemHolder | undefined} */\n\n    let tempHolder;\n\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3;\n    }\n\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n\n        if (tempHolder) {\n          this.itemHolders[2] = tempHolder; // move first to last\n\n          this._containerShiftIndex++;\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i + 2);\n        }\n      } else {\n        tempHolder = this.itemHolders.pop();\n\n        if (tempHolder) {\n          this.itemHolders.unshift(tempHolder); // move last to first\n\n          this._containerShiftIndex--;\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i - 2);\n        }\n      }\n    } // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n\n\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    } // Pan transition might be running (and consntantly updating pan position)\n\n\n    pswp.animations.stopAllPan();\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n    pswp.currSlide = (_this$itemHolders$ = this.itemHolders[1]) === null || _this$itemHolders$ === void 0 ? void 0 : _this$itemHolders$.slide;\n    pswp.contentLoader.updateLazy(positionDifference);\n\n    if (pswp.currSlide) {\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n\n    pswp.dispatch('change');\n  }\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\n\n\n  moveTo(x, dragging) {\n    if (!this.pswp.canLoop() && dragging) {\n      // Apply friction\n      let newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      const delta = Math.round(x - this.x);\n\n      if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) {\n        x = this.x + delta * MAIN_SCROLL_END_FRICTION;\n      }\n    }\n\n    this.x = x;\n\n    if (this.pswp.container) {\n      setTransform(this.pswp.container, x);\n    }\n\n    this.pswp.dispatch('moveMainScroll', {\n      x,\n      dragging: dragging !== null && dragging !== void 0 ? dragging : false\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\n\nconst KeyboardKeyCodesMap = {\n  Escape: 27,\n  z: 90,\n  ArrowLeft: 37,\n  ArrowUp: 38,\n  ArrowRight: 39,\n  ArrowDown: 40,\n  Tab: 9\n};\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\n\nconst getKeyboardEventKey = (key, isKeySupported) => {\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\n};\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\n\n\nclass Keyboard {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @private */\n\n    this._wasFocused = false;\n    pswp.on('bindEvents', () => {\n      if (pswp.options.trapFocus) {\n        // Dialog was likely opened by keyboard if initial point is not defined\n        if (!pswp.options.initialPointerPos) {\n          // focus causes layout,\n          // which causes lag during the animation,\n          // that's why we delay it until the opener transition ends\n          this._focusRoot();\n        }\n\n        pswp.events.add(document, 'focusin',\n        /** @type EventListener */\n        this._onFocusIn.bind(this));\n      }\n\n      pswp.events.add(document, 'keydown',\n      /** @type EventListener */\n      this._onKeyDown.bind(this));\n    });\n    const lastActiveElement =\n    /** @type {HTMLElement} */\n    document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n  /** @private */\n\n\n  _focusRoot() {\n    if (!this._wasFocused && this.pswp.element) {\n      this.pswp.element.focus();\n      this._wasFocused = true;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\n\n\n  _onKeyDown(e) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('keydown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n    /** @type {Methods<PhotoSwipe> | undefined} */\n\n\n    let keydownAction;\n    /** @type {'x' | 'y' | undefined} */\n\n    let axis;\n    let isForward = false;\n    const isKeySupported = ('key' in e);\n\n    switch (isKeySupported ? e.key : e.keyCode) {\n      case getKeyboardEventKey('Escape', isKeySupported):\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n\n        break;\n\n      case getKeyboardEventKey('z', isKeySupported):\n        keydownAction = 'toggleZoom';\n        break;\n\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\n        axis = 'x';\n        break;\n\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\n        axis = 'x';\n        isForward = true;\n        break;\n\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\n        isForward = true;\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('Tab', isKeySupported):\n        this._focusRoot();\n\n        break;\n    } // if left/right/top/bottom key\n\n\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n      const {\n        currSlide\n      } = pswp;\n\n      if (pswp.options.arrowKeys && axis === 'x' && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n\n    if (keydownAction) {\n      e.preventDefault(); // @ts-ignore\n\n      pswp[keydownAction]();\n    }\n  }\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\n\n\n  _onFocusIn(e) {\n    const {\n      template\n    } = this.pswp;\n\n    if (template && document !== e.target && template !== e.target && !template.contains(\n    /** @type {Node} */\n    e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\n\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\n\n/**\r\n * Runs CSS transition.\r\n */\n\nclass CSSAnimation {\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\n  constructor(props) {\n    var _props$prop;\n\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      onFinish = () => {},\n      duration = 333,\n      easing = DEFAULT_EASING\n    } = props;\n    this.onFinish = onFinish; // support only transform and opacity\n\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = (_props$prop = props[prop]) !== null && _props$prop !== void 0 ? _props$prop : '';\n    /** @private */\n\n    this._target = target;\n    /** @private */\n\n    this._onComplete = onComplete;\n    /** @private */\n\n    this._finished = false;\n    /** @private */\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this); // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transition won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n\n    /** @private */\n\n    this._helperTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._helperTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false); // Safari occasionally does not emit transitionend event\n        // if element property was modified during the transition,\n        // which may be caused by resize or third party component,\n        // using timeout as a safety fallback\n\n        this._helperTimeout = setTimeout(() => {\n          this._finalizeAnimation();\n        }, duration + 500);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\n\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._helperTimeout) {\n      clearTimeout(this._helperTimeout);\n    }\n\n    removeTransitionStyle(this._target);\n\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n/**\r\n * Spring easing helper\r\n */\n\nclass SpringEaser {\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n    // https://en.wikipedia.org/wiki/Damping_ratio\n\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO; // https://en.wikipedia.org/wiki/Natural_frequency\n\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n    this._dampedFrequency = this._naturalFrequency;\n\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\n\n\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n    let displacement = 0;\n    let coeff;\n    deltaTime /= 1000;\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n      this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n      displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n      this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);\n    } // Overdamped (>1) damping ratio is not supported\n\n\n    return displacement;\n  }\n\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\n\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\n\nclass SpringAnimation {\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n  constructor(props) {\n    this.props = props;\n    this._raf = 0;\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish = () => {},\n      dampingRatio,\n      naturalFrequency\n    } = props;\n    this.onFinish = onFinish;\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime); // Stop the animation if velocity is low and position is close to end\n\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n\n          if (onComplete) {\n            onComplete();\n          }\n\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n\n    this._raf = requestAnimationFrame(animationLoop);\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n\n    this._raf = 0;\n  }\n\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\n\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\n\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\n\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\n\n/**\r\n * Manages animations\r\n */\n\nclass Animations {\n  constructor() {\n    /** @type {Animation[]} */\n    this.activeAnimations = [];\n  }\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\n\n\n  startTransition(props) {\n    this._start(props);\n  }\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\n\n\n  _start(props, isSpring) {\n    const animation = isSpring ? new SpringAnimation(\n    /** @type SpringAnimationProps */\n    props) : new CSSAnimation(\n    /** @type CssAnimationProps */\n    props);\n    this.activeAnimations.push(animation);\n\n    animation.onFinish = () => this.stop(animation);\n\n    return animation;\n  }\n  /**\r\n   * @param {Animation} animation\r\n   */\n\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n\n  stopAll() {\n    // _stopAllAnimations\n    this.activeAnimations.forEach(animation => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\n\n\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\n\n\n  isPanRunning() {\n    return this.activeAnimations.some(animation => {\n      return animation.props.isPan;\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\nclass ScrollWheel {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.element, 'wheel',\n    /** @type EventListener */\n    this._onWheel.bind(this));\n  }\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\n\n\n  _onWheel(e) {\n    e.preventDefault();\n    const {\n      currSlide\n    } = this.pswp;\n    let {\n      deltaX,\n      deltaY\n    } = e;\n\n    if (!currSlide) {\n      return;\n    }\n\n    if (this.pswp.dispatch('wheel', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n\n        zoomFactor = 2 ** zoomFactor;\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n\n        currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);\n      }\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\n\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\n\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\n\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\n\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\n\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\n\nfunction addElementHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">'; // replace all %d with size\n\n  out = out.split('%d').join(\n  /** @type {string} */\n  svgData.size || 32); // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n\n  out += svgData.inner;\n  out += '</svg>';\n  return out;\n}\n\nclass UIElement {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\n  constructor(pswp, data) {\n    var _container;\n\n    const name = data.name || data.className;\n    let elementHTML = data.html; // @ts-expect-error lookup only by `data.name` maybe?\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    } // Allow to override SVG icons from options\n    // @ts-expect-error lookup only by `data.name` maybe?\n\n\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      // @ts-expect-error lookup only by `data.name` maybe?\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n\n    pswp.dispatch('uiElementCreate', {\n      data\n    });\n    let className = '';\n\n    if (data.isButton) {\n      className += 'pswp__button ';\n      className += data.className || `pswp__button--${data.name}`;\n    } else {\n      className += data.className || `pswp__${data.name}`;\n    }\n\n    let tagName = data.isButton ? data.tagName || 'button' : data.tagName || 'div';\n    tagName =\n    /** @type {keyof HTMLElementTagNameMap} */\n    tagName.toLowerCase();\n    /** @type {HTMLElement} */\n\n    const element = createElement(className, tagName);\n\n    if (data.isButton) {\n      if (tagName === 'button') {\n        /** @type {HTMLButtonElement} */\n        element.type = 'button';\n      }\n\n      let {\n        title\n      } = data;\n      const {\n        ariaLabel\n      } = data; // @ts-expect-error lookup only by `data.name` maybe?\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        // @ts-expect-error lookup only by `data.name` maybe?\n        title = pswp.options[name + 'Title'];\n      }\n\n      if (title) {\n        element.title = title;\n      }\n\n      const ariaText = ariaLabel || title;\n\n      if (ariaText) {\n        element.setAttribute('aria-label', ariaText);\n      }\n    }\n\n    element.innerHTML = addElementHTML(elementHTML);\n\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n\n    if (data.onClick) {\n      element.onclick = e => {\n        if (typeof data.onClick === 'string') {\n          // @ts-ignore\n          pswp[data.onClick]();\n        } else if (typeof data.onClick === 'function') {\n          data.onClick(e, element, pswp);\n        }\n      };\n    } // Top bar is default position\n\n\n    const appendTo = data.appendTo || 'bar';\n    /** @type {HTMLElement | undefined} root element by default */\n\n    let container = pswp.element;\n\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\n      }\n\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      }\n    }\n\n    (_container = container) === null || _container === void 0 || _container.appendChild(pswp.applyFilters('uiElement', element, data));\n  }\n\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow'); // TODO: this should point to a unique id for this instance\n\n  element.setAttribute('aria-controls', 'pswp__items');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n/** @type {UIElementData} */\n\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  className: 'pswp__button--arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n/** @type {UIElementData} */\n\nconst arrowNext = {\n  name: 'arrowNext',\n  className: 'pswp__button--arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'bar',\n  order: 7,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\n    outlineID: 'pswp__icn-loading'\n  },\n  onInit: (indicatorElement, pswp) => {\n    /** @type {boolean | undefined} */\n    let isVisible;\n    /** @type {NodeJS.Timeout | null} */\n\n    let delayTimeout = null;\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\n    };\n    /**\r\n     * @param {boolean} visible\r\n     */\n\n\n    const setIndicatorVisibility = visible => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n        toggleIndicatorClass('active', visible);\n      }\n    };\n\n    const updatePreloaderVisibility = () => {\n      var _pswp$currSlide;\n\n      if (!((_pswp$currSlide = pswp.currSlide) !== null && _pswp$currSlide !== void 0 && _pswp$currSlide.content.isLoading())) {\n        setIndicatorVisibility(false);\n\n        if (delayTimeout) {\n          clearTimeout(delayTimeout);\n          delayTimeout = null;\n        }\n\n        return;\n      }\n\n      if (!delayTimeout) {\n        // display loading indicator with delay\n        delayTimeout = setTimeout(() => {\n          var _pswp$currSlide2;\n\n          setIndicatorVisibility(Boolean((_pswp$currSlide2 = pswp.currSlide) === null || _pswp$currSlide2 === void 0 ? void 0 : _pswp$currSlide2.content.isLoading()));\n          delayTimeout = null;\n        }, pswp.options.preloaderDelay);\n      }\n    };\n\n    pswp.on('change', updatePreloaderVisibility);\n    pswp.on('loadComplete', e => {\n      if (pswp.currSlide === e.slide) {\n        updatePreloaderVisibility();\n      }\n    }); // expose the method\n\n    if (pswp.ui) {\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\n    }\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();\n    });\n  }\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\n\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\n}\n\nclass UI {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isRegistered = false;\n    /** @type {UIElementData[]} */\n\n    this.uiElementsData = [];\n    /** @type {(UIElement | UIElementData)[]} */\n\n    this.items = [];\n    /** @type {() => void} */\n\n    this.updatePreloaderVisibility = () => {};\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\n\n\n    this._lastUpdatedZoomLevel = undefined;\n  }\n\n  init() {\n    const {\n      pswp\n    } = this;\n    this.isRegistered = false;\n    this.uiElementsData = [closeButton, arrowPrev, arrowNext, zoomButton, loadingIndicator, counterIndicator];\n    pswp.dispatch('uiRegister'); // sort by order\n\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n    this.items = [];\n    this.isRegistered = true;\n    this.uiElementsData.forEach(uiElementData => {\n      this.registerElement(uiElementData);\n    });\n    pswp.on('change', () => {\n      var _pswp$element;\n\n      (_pswp$element = pswp.element) === null || _pswp$element === void 0 || _pswp$element.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\n    });\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\n\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(new UIElement(this.pswp, elementData));\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\n\n\n  _onZoomPanUpdate() {\n    const {\n      template,\n      currSlide,\n      options\n    } = this.pswp;\n\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\n      return;\n    }\n\n    let {\n      currZoomLevel\n    } = currSlide; // if not open yet - check against initial zoom level\n\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n\n    this._lastUpdatedZoomLevel = currZoomLevel;\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary; // Initial and secondary zoom levels are almost equal\n\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n\n    template.classList.add('pswp--zoom-allowed');\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\n\n    if (options.imageClickAction === 'zoom' || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\n\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\nfunction getBoundsByElement(el) {\n  const thumbAreaRect = el.getBoundingClientRect();\n  return {\n    x: thumbAreaRect.left,\n    y: thumbAreaRect.top,\n    w: thumbAreaRect.width\n  };\n}\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\n\n\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n  const thumbAreaRect = el.getBoundingClientRect(); // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\n\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  }; // Coordinates of inner crop area\n  // relative to the image\n\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n  return bounds;\n}\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\n\n\nfunction getThumbBounds(index, itemData, instance) {\n  // legacy event, before filters were introduced\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  }); // @ts-expect-error\n\n  if (event.thumbBounds) {\n    // @ts-expect-error\n    return event.thumbBounds;\n  }\n\n  const {\n    element\n  } = itemData;\n  /** @type {Bounds | undefined} */\n\n  let thumbBounds;\n  /** @type {HTMLElement | null | undefined} */\n\n  let thumbnail;\n\n  if (element && instance.options.thumbSelector !== false) {\n    const thumbSelector = instance.options.thumbSelector || 'img';\n    thumbnail = element.matches(thumbSelector) ? element :\n    /** @type {HTMLElement | null} */\n    element.querySelector(thumbSelector);\n  }\n\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\n\n  if (thumbnail) {\n    if (!itemData.thumbCropped) {\n      thumbBounds = getBoundsByElement(thumbnail);\n    } else {\n      thumbBounds = getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w || 0, itemData.height || itemData.h || 0);\n    }\n  }\n\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n\n  addFilter(name, fn, priority = 100) {\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n\n  applyFilters(name, ...args) {\n    var _this$_filters$name3;\n\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  off(name, fn) {\n    var _this$pswp3;\n\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event =\n    /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n\n}\n\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n\n    if (imageSrc) {\n      const imgEl =\n      /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    var _this$element;\n\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n\n    this.element = null;\n  }\n\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc', // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n\n    if (this.element && !reload) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    const imageElement =\n    /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n\n    setWidthHeight(this.element, width, height);\n\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n\n    const image =\n    /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.remove();\n\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl =\n      /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n\n    this.isAttached = true;\n\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    const supportsDecode = ('decode' in this.element);\n\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n\n  remove() {\n    this.isAttached = false;\n\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n\n}\n\n/** @typedef {import('./content.js').default} Content */\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\nconst MIN_SLIDES_TO_CACHE = 5;\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n\n  content.lazyLoad();\n\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\nclass ContentLoader {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp; // Total amount of cached images\n\n    this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, MIN_SLIDES_TO_CACHE);\n    /** @type {Content[]} */\n\n    this._cachedItems = [];\n  }\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\n\n\n  updateLazy(diff) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n\n    const {\n      preload\n    } = pswp.options;\n    const isForward = diff === undefined ? true : diff >= 0;\n    let i; // preload[1] - num items to preload in forward direction\n\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : -i));\n    } // preload[0] - num items to preload in backward direction\n\n\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? -i : i));\n    }\n  }\n  /**\r\n   * @param {number} initialIndex\r\n   */\n\n\n  loadSlideByIndex(initialIndex) {\n    const index = this.pswp.getLoopedIndex(initialIndex); // try to get cached content\n\n    let content = this.getContentByIndex(index);\n\n    if (!content) {\n      // no cached content, so try to load from scratch:\n      content = lazyLoadSlide(index, this.pswp); // if content can be loaded, add it to cache:\n\n      if (content) {\n        this.addToCache(content);\n      }\n    }\n  }\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\n\n\n  getContentBySlide(slide) {\n    let content = this.getContentByIndex(slide.index);\n\n    if (!content) {\n      // create content if not found in cache\n      content = this.pswp.createContentFromData(slide.data, slide.index);\n      this.addToCache(content);\n    } // assign slide to content\n\n\n    content.setSlide(slide);\n    return content;\n  }\n  /**\r\n   * @param {Content} content\r\n   */\n\n\n  addToCache(content) {\n    // move to the end of array\n    this.removeByIndex(content.index);\n\n    this._cachedItems.push(content);\n\n    if (this._cachedItems.length > this.limit) {\n      // Destroy the first content that's not attached\n      const indexToRemove = this._cachedItems.findIndex(item => {\n        return !item.isAttached && !item.hasSlide;\n      });\n\n      if (indexToRemove !== -1) {\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n\n        removedItem.destroy();\n      }\n    }\n  }\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\n\n\n  removeByIndex(index) {\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\n\n    if (indexToRemove !== -1) {\n      this._cachedItems.splice(indexToRemove, 1);\n    }\n  }\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\n\n\n  getContentByIndex(index) {\n    return this._cachedItems.find(content => content.index === index);\n  }\n\n  destroy() {\n    this._cachedItems.forEach(content => content.destroy());\n\n    this._cachedItems = [];\n  }\n\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n\n  getItemData(index) {\n    var _this$options2;\n\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl =\n    /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\n\nconst MIN_OPACITY = 0.003;\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\n\nclass Opener {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this.isOpen = false;\n    this.isClosing = false;\n    this.isOpening = false;\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\n\n    this._duration = undefined;\n    /** @private */\n\n    this._useAnimation = false;\n    /** @private */\n\n    this._croppedZoom = false;\n    /** @private */\n\n    this._animateRootOpacity = false;\n    /** @private */\n\n    this._animateBgOpacity = false;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\n\n    this._placeholder = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._opacityElement = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._cropContainer1 = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\n\n    this._cropContainer2 = undefined;\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\n\n    this._thumbBounds = undefined;\n    this._prepareOpen = this._prepareOpen.bind(this); // Override initial zoom and pan position\n\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n\n  open() {\n    this._prepareOpen();\n\n    this._start();\n  }\n\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return;\n    }\n\n    const slide = this.pswp.currSlide;\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\n      this._duration = 0;\n    }\n\n    this._applyStartProps();\n\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n  }\n  /** @private */\n\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n\n    if (!this.isOpening) {\n      const slide = this.pswp.currSlide;\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\n        this._duration = 0;\n      }\n\n      this._applyStartProps();\n    }\n  }\n  /** @private */\n\n\n  _applyStartProps() {\n    const {\n      pswp\n    } = this;\n    const slide = this.pswp.currSlide;\n    const {\n      options\n    } = pswp;\n\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = undefined;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = undefined;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n\n    this._placeholder = slide === null || slide === void 0 ? void 0 : slide.getPlaceholderElement();\n    pswp.animations.stopAll(); // Discard animations when duration is less than 50ms\n\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\n    this._animateZoom = Boolean(this._thumbBounds) && (slide === null || slide === void 0 ? void 0 : slide.content.usePlaceholder()) && (!this.isClosing || !pswp.mainScroll.isShifted());\n\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n\n      if (this.isOpening && slide) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      var _options$showHideOpac;\n\n      this._animateRootOpacity = (_options$showHideOpac = options.showHideOpacity) !== null && _options$showHideOpac !== void 0 ? _options$showHideOpac : false;\n    }\n\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\n\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      }\n\n      return;\n    }\n\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\n      var _this$pswp$currSlide;\n\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.holderElement;\n\n      if (pswp.container) {\n        pswp.container.style.overflow = 'hidden';\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\n      }\n    } else {\n      this._croppedZoom = false;\n    }\n\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateRootOpacity) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      } else {\n        if (this._animateBgOpacity && pswp.bg) {\n          pswp.bg.style.opacity = String(MIN_OPACITY);\n        }\n\n        if (pswp.element) {\n          pswp.element.style.opacity = '1';\n        }\n      }\n\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.style.willChange = 'transform'; // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n\n          this._placeholder.style.opacity = String(MIN_OPACITY);\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      if (pswp.mainScroll.itemHolders[0]) {\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      }\n\n      if (pswp.mainScroll.itemHolders[2]) {\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n      }\n\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n  /** @private */\n\n\n  _start() {\n    if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise(resolve => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage(\n        /** @type {HTMLImageElement} */\n        this._placeholder).finally(() => {\n          decoded = true;\n\n          if (!isDelaying) {\n            resolve(true);\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n\n          if (decoded) {\n            resolve(true);\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n  /** @private */\n\n\n  _initiate() {\n    var _this$pswp$element, _this$pswp$element2;\n\n    (_this$pswp$element = this.pswp.element) === null || _this$pswp$element === void 0 || _this$pswp$element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n    this.pswp.dispatch(this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'); // legacy event\n\n    this.pswp.dispatch(\n    /** @type {'initialZoomIn' | 'initialZoomOut'} */\n    'initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    (_this$pswp$element2 = this.pswp.element) === null || _this$pswp$element2 === void 0 || _this$pswp$element2.classList.toggle('pswp--ui-visible', this.isOpening);\n\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = '1';\n      }\n\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n  /** @private */\n\n\n  _onAnimationComplete() {\n    const {\n      pswp\n    } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n    pswp.dispatch(this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'); // legacy event\n\n    pswp.dispatch(\n    /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\n    'initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      var _pswp$currSlide;\n\n      if (this._animateZoom && pswp.container) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n\n      (_pswp$currSlide = pswp.currSlide) === null || _pswp$currSlide === void 0 || _pswp$currSlide.applyCurrentZoomPan();\n    }\n  }\n  /** @private */\n\n\n  _animateToOpenState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n\n      if (pswp.currSlide) {\n        pswp.currSlide.zoomAndPanToInitial();\n\n        this._animateTo(pswp.currSlide.container, 'transform', pswp.currSlide.getCurrentTransform());\n      }\n    }\n\n    if (this._animateBgOpacity && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '1');\n    }\n  }\n  /** @private */\n\n\n  _animateToClosedState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    } // do not animate opacity if it's already at 0\n\n\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', '0');\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '0');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\n\n\n  _setClosedStateZoomPan(animate) {\n    if (!this._thumbBounds) return;\n    const {\n      pswp\n    } = this;\n    const {\n      innerRect\n    } = this._thumbBounds;\n    const {\n      currSlide,\n      viewportSize\n    } = pswp;\n\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n\n      if (animate) {\n        this._animateTo(this._cropContainer1, 'transform', toTransformString(containerOnePanX, containerOnePanY));\n\n        this._animateTo(this._cropContainer2, 'transform', toTransformString(containerTwoPanX, containerTwoPanY));\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n\n    if (currSlide) {\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n\n      if (animate) {\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n      } else {\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\n\n\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n\n    const {\n      animations\n    } = this.pswp;\n    /** @type {AnimationProps} */\n\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\n\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\n\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\n\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\n\n/** @typedef {SlideData[]} DataSourceArray */\n\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\n\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\n\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\n\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\n\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\n\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\n\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\n\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\n\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\n\n/** @type {PreparedPhotoSwipeOptions} */\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  trapFocus: true,\n  returnFocus: true,\n  maxWidthToAnimate: 4000,\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n  indexIndicatorSep: ' / ',\n  preloaderDelay: 2000,\n  bgOpacity: 0.8,\n  index: 0,\n  errorMsg: 'The image cannot be loaded',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n/**\r\n * PhotoSwipe Core\r\n */\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    this.options = this._prepareOptions(options || {});\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\n\n    this._prevViewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.viewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * background (backdrop) opacity\r\n     */\n\n    this.bgOpacity = 1;\n    this.currIndex = 0;\n    this.potentialIndex = 0;\n    this.isOpen = false;\n    this.isDestroying = false;\n    this.hasMouse = false;\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\n\n    this._initialItemData = {};\n    /** @type {Bounds | undefined} */\n\n    this._initialThumbBounds = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.topBar = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.template = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.container = undefined;\n    /** @type {HTMLElement | undefined} */\n\n    this.scrollWrap = undefined;\n    /** @type {Slide | undefined} */\n\n    this.currSlide = undefined;\n    this.events = new DOMEvents();\n    this.animations = new Animations();\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.contentLoader = new ContentLoader(this);\n  }\n  /** @returns {boolean} */\n\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return false;\n    }\n\n    this.isOpen = true;\n    this.dispatch('init'); // legacy\n\n    this.dispatch('beforeOpen');\n\n    this._createMainStructure(); // add classes to the root element of PhotoSwipe\n\n\n    let rootClasses = 'pswp--open';\n\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n\n    if (this.element) {\n      this.element.className += ' ' + rootClasses;\n    }\n\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n    // initialize scroll wheel handler to block the scroll\n\n    this.scrollWheel = new ScrollWheel(this); // sanitize index\n\n    if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    } // causes forced synchronous layout\n\n\n    this.updateSize();\n    this.offset.y = window.pageYOffset;\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', {\n      index: this.currIndex,\n      data: this._initialItemData,\n      slide: undefined\n    }); // *Layout* - calculate size and position of elements here\n\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n    this.on('openingAnimationEnd', () => {\n      const {\n        itemHolders\n      } = this.mainScroll; // Add content to the previous and next slide\n\n      if (itemHolders[0]) {\n        itemHolders[0].el.style.display = 'block';\n        this.setContent(itemHolders[0], this.currIndex - 1);\n      }\n\n      if (itemHolders[2]) {\n        itemHolders[2].el.style.display = 'block';\n        this.setContent(itemHolders[2], this.currIndex + 1);\n      }\n\n      this.appendHeavy();\n      this.contentLoader.updateLazy();\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    }); // set content for center slide (first time)\n\n    if (this.mainScroll.itemHolders[1]) {\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    }\n\n    this.dispatch('change');\n    this.opener.open();\n    this.dispatch('afterInit');\n    return true;\n  }\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\n\n\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n\n    return clamp(index, 0, numSlides - 1);\n  }\n\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide;\n\n      (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.appendHeavy();\n    });\n  }\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\n\n\n  goTo(index) {\n    this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);\n  }\n  /**\r\n   * Go to the next slide.\r\n   */\n\n\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n  /**\r\n   * Go to the previous slide.\r\n   */\n\n\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\n\n\n  zoomTo(...args) {\n    var _this$currSlide;\n\n    (_this$currSlide = this.currSlide) === null || _this$currSlide === void 0 || _this$currSlide.zoomTo(...args);\n  }\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\n\n\n  toggleZoom() {\n    var _this$currSlide2;\n\n    (_this$currSlide2 = this.currSlide) === null || _this$currSlide2 === void 0 || _this$currSlide2.toggleZoom();\n  }\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\n\n\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isDestroying = true;\n    this.dispatch('close');\n    this.events.removeAll();\n    this.opener.close();\n  }\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\n\n\n  destroy() {\n    var _this$element;\n\n    if (!this.isDestroying) {\n      this.options.showHideAnimationType = 'none';\n      this.close();\n      return;\n    }\n\n    this.dispatch('destroy');\n    this._listeners = {};\n\n    if (this.scrollWrap) {\n      this.scrollWrap.ontouchmove = null;\n      this.scrollWrap.ontouchend = null;\n    }\n\n    (_this$element = this.element) === null || _this$element === void 0 || _this$element.remove();\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide2;\n\n      (_itemHolder$slide2 = itemHolder.slide) === null || _itemHolder$slide2 === void 0 || _itemHolder$slide2.destroy();\n    });\n    this.contentLoader.destroy();\n    this.events.removeAll();\n  }\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\n\n\n  refreshSlideContent(slideIndex) {\n    this.contentLoader.removeByIndex(slideIndex);\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\n      var _this$currSlide$index, _this$currSlide3;\n\n      let potentialHolderIndex = ((_this$currSlide$index = (_this$currSlide3 = this.currSlide) === null || _this$currSlide3 === void 0 ? void 0 : _this$currSlide3.index) !== null && _this$currSlide$index !== void 0 ? _this$currSlide$index : 0) - 1 + i;\n\n      if (this.canLoop()) {\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\n      }\n\n      if (potentialHolderIndex === slideIndex) {\n        // set the new slide content\n        this.setContent(itemHolder, slideIndex, true); // activate the new slide if it's current\n\n        if (i === 1) {\n          var _itemHolder$slide3;\n\n          this.currSlide = itemHolder.slide;\n          (_itemHolder$slide3 = itemHolder.slide) === null || _itemHolder$slide3 === void 0 || _itemHolder$slide3.setIsActive(true);\n        }\n      }\n    });\n    this.dispatch('change');\n  }\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\n\n\n  setContent(holder, index, force) {\n    if (this.canLoop()) {\n      index = this.getLoopedIndex(index);\n    }\n\n    if (holder.slide) {\n      if (holder.slide.index === index && !force) {\n        // exit if holder already contains this slide\n        // this could be common when just three slides are used\n        return;\n      } // destroy previous slide\n\n\n      holder.slide.destroy();\n      holder.slide = undefined;\n    } // exit if no loop and index is out of bounds\n\n\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\n      return;\n    }\n\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this); // set current slide\n\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n\n    holder.slide.append(holder.el);\n  }\n  /** @returns {Point} */\n\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\n\n\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    } //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n\n    const newViewportSize = getViewportSize(this.options, this);\n\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    } //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n\n\n    equalizePoints(this._prevViewportSize, newViewportSize);\n    this.dispatch('beforeResize');\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n\n    this._updatePageScrollOffset();\n\n    this.dispatch('viewportSize'); // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n\n    this.mainScroll.resize(this.opener.isOpen);\n\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n\n    this.dispatch('resize');\n  }\n  /**\r\n   * @param {number} opacity\r\n   */\n\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n\n    if (this.bg) {\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\n    }\n  }\n  /**\r\n   * Whether mouse is detected\r\n   */\n\n\n  mouseDetected() {\n    if (!this.hasMouse) {\n      var _this$element2;\n\n      this.hasMouse = true;\n      (_this$element2 = this.element) === null || _this$element2 === void 0 || _this$element2.classList.add('pswp--has_mouse');\n    }\n  }\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\n\n\n  _handlePageResize() {\n    this.updateSize(); // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\n\n\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\n\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\n\n\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.element = createElement('pswp', 'div');\n    this.element.setAttribute('tabindex', '-1');\n    this.element.setAttribute('role', 'dialog'); // template is legacy prop\n\n    this.template = this.element; // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n\n    this.bg = createElement('pswp__bg', 'div', this.element);\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\n    this.container = createElement('pswp__container', 'div', this.scrollWrap); // aria pattern: carousel\n\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\n    this.container.setAttribute('aria-live', 'off');\n    this.container.setAttribute('id', 'pswp__items');\n    this.mainScroll.appendHolders();\n    this.ui = new UI(this);\n    this.ui.init(); // append to DOM\n\n    (this.options.appendToEl || document.body).appendChild(this.element);\n  }\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\n\n\n  getThumbBounds() {\n    return getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);\n  }\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\n\n\n  canLoop() {\n    return this.options.loop && this.getNumItems() > 2;\n  }\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\n\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n    /** @type {PreparedPhotoSwipeOptions} */\n\n\n    return { ...defaultOptions,\n      ...options\n    };\n  }\n\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","update","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","_this$content$placeho","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","_this$gestures$pswp$e","actionFullName","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","applyFilters","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_this$itemHolders$","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","trapFocus","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","_props$prop","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","f1","f2","removeFilter","args","_this$_filters$name3","apply","_this$_listeners$name","_this$pswp2","off","_this$pswp3","_this$_listeners$name2","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","supportsDecode","decode","catch","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","removeByIndex","indexToRemove","item","find","PhotoSwipeBase","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","_options$showHideOpac","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","_itemHolder$slide","goTo","next","prev","_this$currSlide","_this$currSlide2","_itemHolder$slide2","refreshSlideContent","slideIndex","_this$currSlide$index","_this$currSlide3","potentialHolderIndex","_itemHolder$slide3","holder","matchMedia","matches","_this$element2","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"sourceRoot":""}